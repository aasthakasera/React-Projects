{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\nimport React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board'; // function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const [activeColor, setActiveColor] = useState('red');\n//     const [previousRows, setPreviousRows] = useState([]);\n//     const [previousFeedback, setPreviousFeedback] = useState([]);\n//     const [currentRow, setCurrentRow] = useState(['','','','']);\n//     const [feedback, setFeedback] = useState([0,0,0,0]);\n//     const [activeRowIndex, setRowIndex] = useState(0);\n//     const [totalRows, setTotalRows] = useState(10);\n//     const [code, setCode] = useState([]);\n//     const [canCheck, setCanCheck] = useState(false);\n//     const [victory, setVictory] = useState(false);\n//     const [defeat, setDefeat] = useState(false);\n//     //color = ['red', 'green', 'blue', 'orange', 'purple'];\n//     code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     const activateColor = (color) => {\n//         setActiveColor(color)\n//       }\n//     const setColor = (color, id) => {\n//         if (victory) {\n//           return false\n//         }\n//         const rowId = +id.substr(1, id.indexOf('-') - 1)\n//         const pegId = +id.substr(id.indexOf('-') + 1)\n//         let activeRow = currentRow\n//         let isArrayFull = 0\n//         if (activeRowIndex === rowId && color) {\n//           activeRow[pegId] = color\n//           setCurrentRow(activeRow)\n//         //   this.setState({\n//         //     currentRow: currentRow,\n//         //   })\n//           /* Checking if currentRow is Full */\n//           for (let i in activeRow) {\n//             if (activeRow[i].length > 0) {\n//               isArrayFull++;\n//             }\n//           }\n//           if (isArrayFull >= activeRow.length) {\n//               setCanCheck(true)\n//             // this.setState({ canCheck: true })\n//           } else {\n//               setCanCheck(false)\n//             // this.setState({ canCheck: false })\n//           }\n//         }\n//       }\n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(code))\n//         const hints = feedback\n//         const previousHints = previousFeedback\n//         const previousRow = previousRows\n//         /* Checking extact matches */\n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         /* Checking partial matches */\n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n//         /* checking if player won */\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n//         /* checking if player lost */\n//         let loss = defeat;\n//         if (activeRowIndex >= totalRows-1) {\n//           loss = true;\n//         }\n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n//         setFeedback([0, 0, 0, 0])\n//         setRowIndex(activeRowIndex+1)\n//         setPreviousFeedback(previousHints)\n//         setCurrentRow(['','','',''])\n//         setPreviousRows(previousRow)\n//         setCanCheck(false)\n//         setVictory(win)\n//         setDefeat(loss)\n//         // this.setState({\n//         //   hints: [0, 0, 0, 0],\n//         //   activeRow: this.state.activeRow + 1,\n//         //   previousHints: previousHints,\n//         //   currentRow: ['', '', '', ''],\n//         //   previousRows: previousRows,\n//         //   canCheck: false,\n//         //   victory: victory,\n//         //   defeat: defeat,\n//         // })\n//       }\n//     const newGame = () => {\n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         console.log('new Game')\n//         setRowIndex(0)\n//         setPreviousRows([])\n//         setPreviousFeedback([])\n//         setCurrentRow(['','','',''])\n//         setFeedback([0,0,0,0])\n//         setCode(secretCode)\n//         setCanCheck(false)\n//         setVictory(false)\n//         setDefeat(false)\n//         // this.setState({\n//         //   activeRow: 0,\n//         //   previousRows: [],\n//         //   previousHints: [],\n//         //   currentRow: ['', '', '', ''],\n//         //   hints: [0, 0, 0, 0],\n//         //   trueRow: trueRow,\n//         //   canCheck: false,\n//         //   victory: false,\n//         //   defeat: false,\n//         // })\n//       }\n//     return (\n//         <div className='game-container'>\n//             <p>HIIIIIIIIII</p>\n//             <h1>hi </h1>\n//           <Colors\n//             list={colors}\n//             activeColor={activeColor}\n//             action={activateColor} />\n//           {/* <Board\n//             state={Game}\n//             pegAction={setColor}\n//             checkAction={checkRow} /> */}\n//           {/* <p className='msg'> {msg} </p>            */}\n//           {/* <Solution\n//             state={Game}\n//             newGame={newGame} /> } */}\n//         </div>\n//       );  \n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activateColor = this.activateColor.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.checkRow = this.checkRow.bind(this);\n    this.newGame = this.newGame.bind(this);\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const trueRow = [];\n\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.state = {\n      colors: colors,\n      activeColor: 'red',\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      activeRow: 0,\n      totalRows: 10,\n      trueRow: trueRow,\n      canCheck: false,\n      //this checks if it's ok to eval currentRow\n      victory: false,\n      defeat: false\n    };\n  }\n\n  activateColor(color) {\n    this.setState({\n      activeColor: color\n    });\n  }\n\n  setColor(color, id) {\n    if (this.state.victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let currentRow = this.state.currentRow;\n    let isArrayFull = 0;\n\n    if (this.state.activeRow === rowId && color) {\n      currentRow[pegId] = color;\n      this.setState({\n        currentRow: currentRow\n      });\n      /* Checking if currentRow is Full */\n\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= currentRow.length) {\n        this.setState({\n          canCheck: true\n        });\n      } else {\n        this.setState({\n          canCheck: false\n        });\n      }\n    }\n  }\n\n  checkRow() {\n    const currentRow = JSON.parse(JSON.stringify(this.state.currentRow));\n    const trueRow = JSON.parse(JSON.stringify(this.state.trueRow));\n    const hints = this.state.hints;\n    const previousHints = this.state.previousHints;\n    const previousRows = this.state.previousRows;\n    /* Checking extact matches */\n\n    for (let i = 0; i < 4; i++) {\n      if (currentRow[i] === trueRow[i]) {\n        hints[i] = 2;\n        delete currentRow[i];\n        delete trueRow[i];\n      }\n    }\n    /* Checking partial matches */\n\n\n    for (let i in currentRow) {\n      for (let j in trueRow) {\n        if (currentRow[i] === trueRow[j]) {\n          hints[i] = 1;\n          delete currentRow[i];\n          delete trueRow[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    /* checking if player won */\n\n    let victory = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        victory = false;\n        break;\n      }\n    }\n    /* checking if player lost */\n\n\n    let defeat = this.state.defeat;\n\n    if (this.state.activeRow >= this.state.totalRows - 1) {\n      defeat = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRows.push(this.state.currentRow);\n    this.setState({\n      hints: [0, 0, 0, 0],\n      activeRow: this.state.activeRow + 1,\n      previousHints: previousHints,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRows,\n      canCheck: false,\n      victory: victory,\n      defeat: defeat\n    });\n  }\n\n  newGame() {\n    const trueRow = [];\n\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    console.log('new Game');\n    this.setState({\n      activeRow: 0,\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      trueRow: trueRow,\n      canCheck: false,\n      victory: false,\n      defeat: false\n    });\n  }\n\n  render() {\n    let msg = this.state.victory ? 'You Win!!' : this.state.defeat ? 'You Lost :(' : '';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        state: this.state,\n        pegAction: this.setColor,\n        checkAction: this.checkRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this);\n  }\n\n} //export default Game;","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Colors","Solution","Board","Game","Component","constructor","props","activateColor","bind","setColor","checkRow","newGame","colors","trueRow","i","push","Math","floor","random","state","activeColor","previousRows","previousHints","currentRow","hints","activeRow","totalRows","canCheck","victory","defeat","color","setState","id","rowId","substr","indexOf","pegId","isArrayFull","length","JSON","parse","stringify","j","sort","a","b","console","log","render","msg"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\n\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const [activeColor, setActiveColor] = useState('red');\n//     const [previousRows, setPreviousRows] = useState([]);\n//     const [previousFeedback, setPreviousFeedback] = useState([]);\n//     const [currentRow, setCurrentRow] = useState(['','','','']);\n//     const [feedback, setFeedback] = useState([0,0,0,0]);\n//     const [activeRowIndex, setRowIndex] = useState(0);\n//     const [totalRows, setTotalRows] = useState(10);\n//     const [code, setCode] = useState([]);\n//     const [canCheck, setCanCheck] = useState(false);\n//     const [victory, setVictory] = useState(false);\n//     const [defeat, setDefeat] = useState(false);\n\n\n//     //color = ['red', 'green', 'blue', 'orange', 'purple'];\n//     code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n    \n//     const activateColor = (color) => {\n//         setActiveColor(color)\n//       }\n\n//     const setColor = (color, id) => {\n//         if (victory) {\n//           return false\n//         }\n//         const rowId = +id.substr(1, id.indexOf('-') - 1)\n//         const pegId = +id.substr(id.indexOf('-') + 1)\n//         let activeRow = currentRow\n//         let isArrayFull = 0\n    \n//         if (activeRowIndex === rowId && color) {\n//           activeRow[pegId] = color\n//           setCurrentRow(activeRow)\n//         //   this.setState({\n//         //     currentRow: currentRow,\n//         //   })\n    \n//           /* Checking if currentRow is Full */\n//           for (let i in activeRow) {\n//             if (activeRow[i].length > 0) {\n//               isArrayFull++;\n//             }\n//           }\n//           if (isArrayFull >= activeRow.length) {\n//               setCanCheck(true)\n//             // this.setState({ canCheck: true })\n//           } else {\n//               setCanCheck(false)\n//             // this.setState({ canCheck: false })\n//           }\n//         }\n//       }\n    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(code))\n//         const hints = feedback\n//         const previousHints = previousFeedback\n//         const previousRow = previousRows\n    \n//         /* Checking extact matches */\n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n    \n//         /* Checking partial matches */\n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n    \n//         hints.sort((a, b) => (b - a))\n    \n//         /* checking if player won */\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n    \n//         /* checking if player lost */\n//         let loss = defeat;\n//         if (activeRowIndex >= totalRows-1) {\n//           loss = true;\n//         }\n    \n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n\n//         setFeedback([0, 0, 0, 0])\n//         setRowIndex(activeRowIndex+1)\n//         setPreviousFeedback(previousHints)\n//         setCurrentRow(['','','',''])\n//         setPreviousRows(previousRow)\n//         setCanCheck(false)\n//         setVictory(win)\n//         setDefeat(loss)\n    \n//         // this.setState({\n//         //   hints: [0, 0, 0, 0],\n//         //   activeRow: this.state.activeRow + 1,\n//         //   previousHints: previousHints,\n//         //   currentRow: ['', '', '', ''],\n//         //   previousRows: previousRows,\n//         //   canCheck: false,\n//         //   victory: victory,\n//         //   defeat: defeat,\n//         // })\n    \n//       }\n//     const newGame = () => {\n    \n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n    \n//         console.log('new Game')\n\n//         setRowIndex(0)\n//         setPreviousRows([])\n//         setPreviousFeedback([])\n//         setCurrentRow(['','','',''])\n//         setFeedback([0,0,0,0])\n//         setCode(secretCode)\n//         setCanCheck(false)\n//         setVictory(false)\n//         setDefeat(false)\n\n//         // this.setState({\n//         //   activeRow: 0,\n//         //   previousRows: [],\n//         //   previousHints: [],\n//         //   currentRow: ['', '', '', ''],\n//         //   hints: [0, 0, 0, 0],\n//         //   trueRow: trueRow,\n//         //   canCheck: false,\n//         //   victory: false,\n//         //   defeat: false,\n//         // })\n//       }\n    \n//     return (\n//         <div className='game-container'>\n//             <p>HIIIIIIIIII</p>\n//             <h1>hi </h1>\n  \n//           <Colors\n//             list={colors}\n//             activeColor={activeColor}\n//             action={activateColor} />\n  \n//           {/* <Board\n//             state={Game}\n//             pegAction={setColor}\n//             checkAction={checkRow} /> */}\n  \n//           {/* <p className='msg'> {msg} </p>            */}\n//           {/* <Solution\n//             state={Game}\n//             newGame={newGame} /> } */}\n//         </div>\n//       );  \n      \n// }\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.activateColor = this.activateColor.bind(this)\n    this.setColor = this.setColor.bind(this)\n    this.checkRow = this.checkRow.bind(this)\n    this.newGame = this.newGame.bind(this)\n\n    const colors = ['red', 'green', 'blue', 'orange', 'purple']\n    const trueRow = []\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(colors[Math.floor(Math.random() * 4) + 1])\n    }   \n\n    this.state = {\n      colors: colors,\n      activeColor: 'red',\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      activeRow: 0,\n      totalRows: 10,\n      trueRow: trueRow,\n      canCheck: false,    //this checks if it's ok to eval currentRow\n      victory: false,\n      defeat: false,\n    }\n  }\n\n  activateColor(color) {\n    this.setState({\n      activeColor: color,\n    })\n  }\n\n  setColor(color, id) {\n    if (this.state.victory) {\n      return false\n    }\n    const rowId = +id.substr(1, id.indexOf('-') - 1)\n    const pegId = +id.substr(id.indexOf('-') + 1)\n    let currentRow = this.state.currentRow\n    let isArrayFull = 0\n\n    if (this.state.activeRow === rowId && color) {\n      currentRow[pegId] = color\n      this.setState({\n        currentRow: currentRow,\n      })\n\n      /* Checking if currentRow is Full */\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n      if (isArrayFull >= currentRow.length) {\n        this.setState({ canCheck: true })\n      } else {\n        this.setState({ canCheck: false })\n      }\n    }\n  }\n\n  checkRow() {\n    const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n    const trueRow = JSON.parse(JSON.stringify(this.state.trueRow))\n    const hints = this.state.hints\n    const previousHints = this.state.previousHints\n    const previousRows = this.state.previousRows\n\n    /* Checking extact matches */\n    for (let i = 0; i < 4; i++) {\n      if (currentRow[i] === trueRow[i]) {\n        hints[i] = 2\n        delete (currentRow[i])\n        delete (trueRow[i])\n      }\n    }\n\n    /* Checking partial matches */\n    for (let i in currentRow) {\n      for (let j in trueRow) {\n        if (currentRow[i] === trueRow[j]) {\n          hints[i] = 1\n          delete (currentRow[i])\n          delete (trueRow[j])\n        }\n      }\n    }\n\n    hints.sort((a, b) => (b - a))\n\n    /* checking if player won */\n    let victory = true\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        victory = false;\n        break;\n      }\n    }\n\n    /* checking if player lost */\n    let defeat = this.state.defeat;\n    if (this.state.activeRow >= this.state.totalRows-1) {\n      defeat = true;\n    }\n\n    /* updating board */\n    previousHints.push(hints)\n    previousRows.push(this.state.currentRow)\n\n    this.setState({\n      hints: [0, 0, 0, 0],\n      activeRow: this.state.activeRow + 1,\n      previousHints: previousHints,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRows,\n      canCheck: false,\n      victory: victory,\n      defeat: defeat,\n    })\n\n  }\n\n  newGame() {\n    \n    const trueRow = []\n    for (let i = 0; i < 4; i++) {\n      trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n    }\n\n    console.log('new Game')\n    this.setState({\n      activeRow: 0,\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      trueRow: trueRow,\n      canCheck: false,\n      victory: false,\n      defeat: false,\n    })\n  }\n\n  render() {\n    let msg = this.state.victory ? 'You Win!!' :\n               ( this.state.defeat ? 'You Lost :(' : '')\n    return (\n      <div className='game-container'>\n\n        {/* <Colors\n          list={this.state.colors}\n          activeColor={this.state.activeColor}\n          action={this.activateColor} /> */}\n\n        <Board\n          state={this.state}\n          pegAction={this.setColor}\n          checkAction={this.checkRow} />\n\n        {/* <p className='msg'> {msg} </p>           \n        <Solution\n          state={this.state}\n          newGame={this.newGame} />  */}\n      </div>\n    );\n  }\n}\n //export default Game;\n"]},"metadata":{},"sourceType":"module"}