{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const [activeColor, setActiveColor] = useState('red');\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [currentRow, setCurrentRow] = useState(['', '', '', '']);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10); // const [code, setCode] = useState([]);\n\n  const [canCheck, setCanCheck] = useState(false);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false);\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const activateColor = color => {\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      setCurrentRow(activeRow);\n      /* Checking if currentRow is Full */\n\n      for (let i in activeRow) {\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= activeRow.length) {\n        setCanCheck(true); // this.setState({ canCheck: true })\n      } else {\n        setCanCheck(false); // this.setState({ canCheck: false })\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(currentRow));\n    const secretCode = JSON.parse(JSON.stringify(code));\n    const hints = feedback;\n    const previousHints = previousFeedback;\n    const previousRow = previousRows;\n    /* Checking extact matches */\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    }\n    /* Checking partial matches */\n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    /* checking if player won */\n\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n    /* checking if player lost */\n\n\n    let loss = defeat;\n\n    if (activeRowIndex >= totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow(['', '', '', '']);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    console.log('new Game');\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow(['', '', '', '']);\n    setFeedback([0, 0, 0, 0]); //setCode(secretCode)\n\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"HIIIIIIIIII\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: Game,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: Game,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }, this), \" }\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 9\n  }, this);\n} // export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       activeRow: 0,\n//       totalRows: 10,\n//       trueRow: trueRow,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n//     if (this.state.activeRow === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const trueRow = JSON.parse(JSON.stringify(this.state.trueRow))\n//     const hints = this.state.hints\n//     const previousHints = this.state.previousHints\n//     const previousRows = this.state.previousRows\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === trueRow[i]) {\n//         hints[i] = 2\n//         delete (currentRow[i])\n//         delete (trueRow[i])\n//       }\n//     }\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in trueRow) {\n//         if (currentRow[i] === trueRow[j]) {\n//           hints[i] = 1\n//           delete (currentRow[i])\n//           delete (trueRow[j])\n//         }\n//       }\n//     }\n//     hints.sort((a, b) => (b - a))\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRow >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n//     /* updating board */\n//     previousHints.push(hints)\n//     previousRows.push(this.state.currentRow)\n//     this.setState({\n//       hints: [0, 0, 0, 0],\n//       activeRow: this.state.activeRow + 1,\n//       previousHints: previousHints,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n//   }\n//   newGame() {\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     console.log('new Game')\n//     this.setState({\n//       activeRow: 0,\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       trueRow: trueRow,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\n\n\n_s(Game, \"VZ4/uKfrUD0i8jNlhMCdldCEjz8=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Colors","Solution","Board","Game","colors","activeColor","setActiveColor","previousRows","setPreviousRows","previousFeedback","setPreviousFeedback","currentRow","setCurrentRow","feedback","setFeedback","activeRowIndex","setRowIndex","totalRows","setTotalRows","canCheck","setCanCheck","victory","setVictory","defeat","setDefeat","code","i","push","Math","floor","random","activateColor","color","setColor","id","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","newGame","state","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\n\nfunction Game() {\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const [activeColor, setActiveColor] = useState('red');\n    const [previousRows, setPreviousRows] = useState([]);\n    const [previousFeedback, setPreviousFeedback] = useState([]);\n    const [currentRow, setCurrentRow] = useState(['','','','']);\n    const [feedback, setFeedback] = useState([0,0,0,0]);\n    const [activeRowIndex, setRowIndex] = useState(0);\n    const [totalRows, setTotalRows] = useState(10);\n    // const [code, setCode] = useState([]);\n    const [canCheck, setCanCheck] = useState(false);\n    const [victory, setVictory] = useState(false);\n    const [defeat, setDefeat] = useState(false);\n\n\n    \n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n    \n    const activateColor = (color) => {\n        setActiveColor(color)\n      }\n\n    const setColor = (color, id) => {\n        if (victory) {\n          return false\n        }\n        const rowId = +id.substr(1, id.indexOf('-') - 1)\n        const pegId = +id.substr(id.indexOf('-') + 1)\n        let activeRow = currentRow\n        let isArrayFull = 0\n    \n        if (activeRowIndex === rowId && color) {\n          activeRow[pegId] = color\n          setCurrentRow(activeRow)\n    \n          /* Checking if currentRow is Full */\n          for (let i in activeRow) {\n            if (activeRow[i].length > 0) {\n              isArrayFull++;\n            }\n          }\n          if (isArrayFull >= activeRow.length) {\n              setCanCheck(true)\n            // this.setState({ canCheck: true })\n          } else {\n              setCanCheck(false)\n            // this.setState({ canCheck: false })\n          }\n        }\n      }\n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(currentRow))\n        const secretCode = JSON.parse(JSON.stringify(code))\n        const hints = feedback\n        const previousHints = previousFeedback\n        const previousRow = previousRows\n    \n        /* Checking extact matches */\n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n    \n        /* Checking partial matches */\n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n    \n        hints.sort((a, b) => (b - a))\n    \n        /* checking if player won */\n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        /* checking if player lost */\n        let loss = defeat;\n        if (activeRowIndex >= totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        setFeedback([0, 0, 0, 0])\n        setRowIndex(activeRowIndex+1)\n        setPreviousFeedback(previousHints)\n        setCurrentRow(['','','',''])\n        setPreviousRows(previousRow)\n        setCanCheck(false)\n        setVictory(win)\n        setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n    \n        console.log('new Game')\n\n        setRowIndex(0)\n        setPreviousRows([])\n        setPreviousFeedback([])\n        setCurrentRow(['','','',''])\n        setFeedback([0,0,0,0])\n        //setCode(secretCode)\n        setCanCheck(false)\n        setVictory(false)\n        setDefeat(false)\n      }\n    \n    return (\n        <div className='game'>\n            <p>HIIIIIIIIII</p>\n            <h1>hi </h1>\n  \n          <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n  \n          <Board\n            state={Game}\n            pegAction={setColor}\n            checkAction={checkRow} />\n  \n          {/* <p className='msg'> {msg} </p>            */}\n          <Solution\n            state={Game}\n            newGame={newGame} /> } \n        </div>\n      );  \n      \n}\n\n// export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n\n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       activeRow: 0,\n//       totalRows: 10,\n//       trueRow: trueRow,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n\n//     if (this.state.activeRow === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const trueRow = JSON.parse(JSON.stringify(this.state.trueRow))\n//     const hints = this.state.hints\n//     const previousHints = this.state.previousHints\n//     const previousRows = this.state.previousRows\n\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === trueRow[i]) {\n//         hints[i] = 2\n//         delete (currentRow[i])\n//         delete (trueRow[i])\n//       }\n//     }\n\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in trueRow) {\n//         if (currentRow[i] === trueRow[j]) {\n//           hints[i] = 1\n//           delete (currentRow[i])\n//           delete (trueRow[j])\n//         }\n//       }\n//     }\n\n//     hints.sort((a, b) => (b - a))\n\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRow >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n\n//     /* updating board */\n//     previousHints.push(hints)\n//     previousRows.push(this.state.currentRow)\n\n//     this.setState({\n//       hints: [0, 0, 0, 0],\n//       activeRow: this.state.activeRow + 1,\n//       previousHints: previousHints,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n\n//   }\n\n//   newGame() {\n    \n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     console.log('new Game')\n//     this.setState({\n//       activeRow: 0,\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       trueRow: trueRow,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}