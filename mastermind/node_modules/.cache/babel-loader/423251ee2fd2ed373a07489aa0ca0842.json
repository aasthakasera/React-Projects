{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\n// import React from 'react';\n// import Colors from './colors';\n// import {Solution} from './solution';\n// import Board from './board';\n// export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const code = []\n//     for (let i = 0; i < 4; i++) {\n//       code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: ['', '', '', ''],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n//     if (this.state.activeRowIndex === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const code = JSON.parse(JSON.stringify(this.state.code))\n//     const feedback = this.state.feedback\n//     const previousFeedback = this.state.previousFeedback\n//     const previousRows = this.state.previousRows\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === code[i]) {\n//         feedback[i] = 2\n//         delete (currentRow[i])\n//         delete (code[i])\n//       }\n//     }\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in code) {\n//         if (currentRow[i] === code[j]) {\n//           feedback[i] = 1\n//           delete (currentRow[i])\n//           delete (code[j])\n//         }\n//       }\n//     }\n//     feedback.sort((a, b) => (b - a))\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in feedback) {\n//       if (feedback[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n//     /* updating board */\n//     previousFeedback.push(feedback)\n//     previousRows.push(this.state.currentRow)\n//     this.setState({\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: this.state.activeRowIndex + 1,\n//       previousFeedback: previousFeedback,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n//   }\n//   newGame() {\n//     const code = []\n//     for (let i = 0; i < 4; i++) {\n//       code.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     console.log('new Game')\n//     this.setState({\n//       activeRowIndex: 0,\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: ['', '', '', ''],\n//       feedback: [0, 0, 0, 0],\n//       code: code,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./board\";\nimport Colors from \"./colors\";\nimport { Solution } from \"./solution\";\n/**\n *\n * @returns 1. infinite loop  ///because of re-rendering\n * 2. how to write if we want to invoke set only once //useEffect\n * 3. how does Set work // it's function like setter\n * 4. Component life cycle ...... \n      a. ComponentDidMount : initialized\n      b. ComponentDidUpdate : Update |-->|\n                                     |<--|\n      c. ComponentWillUnmont : Destroy\n      Follow this link to know more :\n      https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n      context API ()\n\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\nconst [activeColor, setActiveColor] = useState(\"red\");\nconst [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\nconst [canCheck, setCanCheck] = useState(false);\nconst [previousRows, setPreviousRows] = useState([]);\nconst [previousFeedback, setPreviousFeedback] = useState([]);\nconst [feedback, setFeedback] = useState([0, 0, 0, 0]);\nconst [activeRowIndex, setRowIndex] = useState(0);\nconst [totalRows, setTotalRows] = useState(10);\nconst [victory, setVictory] = useState(false);\nconst [defeat, setDefeat] = useState(false);\nexport const gameRow = {\n  colors: colors,\n  activeColor: activeColor,\n  activeRowIndex: activeRowIndex,\n  totalRows: totalRows,\n  previousRows: previousRows,\n  previousFeedback: previousFeedback,\n  currentRow: currentRow,\n  feedback: feedback,\n  code: code,\n  canCheck: canCheck,\n  victory: victory,\n  defeat: defeat\n};\n\nfunction Game() {\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  } // const gameRow = {\n  //   colors: colors,\n  //   activeColor: activeColor,\n  //   activeRowIndex: activeRowIndex,\n  //   totalRows: totalRows,\n  //   previousRows: previousRows,\n  //   previousFeedback: previousFeedback,\n  //   currentRow: currentRow,\n  //   feedback: feedback,\n  //   code: code,\n  //   canCheck: canCheck,\n  //   victory: victory,\n  //   defeat: defeat\n  // };\n\n\n  const activateColor = color => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  }; // const ActivateCurrentRow = (activeRow) => {\n  //   useEffect(()=>{\n  //     setCurrentRow(activeRow);\n  //   }, [activeRow])\n  // }\n\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    console.log(\"row\");\n    console.log(rowId);\n    const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    console.log(\"peg\");\n    console.log(pegId);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      console.log(activeRow); //ActivateCurrentRow(activeRow);\n\n      setCurrentRow(activeRow);\n      console.log(currentRow); //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        console.log(\"length\");\n        console.log(activeRow[i].length);\n\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      console.log(\"array\");\n      console.log(isArrayFull);\n\n      if (isArrayFull >= activeRow.length) {\n        console.log(\"yes\");\n        setCanCheck(true); //gameRow.canCheck = true\n      } else {\n        setCanCheck(false); //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially\n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log(\"new Game\");\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n    setTotalRows(10);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: gameRow.activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: gameRow,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: gameRow,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Game;\nexport default Game; // //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n//       }\n//     const newGame = () => {\n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n// }\n// export default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useEffect","useState","Board","Colors","Solution","colors","activeColor","setActiveColor","currentRow","setCurrentRow","canCheck","setCanCheck","previousRows","setPreviousRows","previousFeedback","setPreviousFeedback","feedback","setFeedback","activeRowIndex","setRowIndex","totalRows","setTotalRows","victory","setVictory","defeat","setDefeat","gameRow","code","Game","i","push","Math","floor","random","activateColor","color","setColor","id","console","log","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","newGame","state"],"mappings":";AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,QAAnC,CAAf;AACE,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,KAAD,CAA9C;AACA,MAAM,CAACO,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAA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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["// import React from 'react';\n// import Colors from './colors';\n// import {Solution} from './solution';\n// import Board from './board';\n\n// export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const code = []\n//     for (let i = 0; i < 4; i++) {\n//       code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n\n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: ['', '', '', ''],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n\n//     if (this.state.activeRowIndex === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const code = JSON.parse(JSON.stringify(this.state.code))\n//     const feedback = this.state.feedback\n//     const previousFeedback = this.state.previousFeedback\n//     const previousRows = this.state.previousRows\n\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === code[i]) {\n//         feedback[i] = 2\n//         delete (currentRow[i])\n//         delete (code[i])\n//       }\n//     }\n\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in code) {\n//         if (currentRow[i] === code[j]) {\n//           feedback[i] = 1\n//           delete (currentRow[i])\n//           delete (code[j])\n//         }\n//       }\n//     }\n\n//     feedback.sort((a, b) => (b - a))\n\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in feedback) {\n//       if (feedback[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n\n//     /* updating board */\n//     previousFeedback.push(feedback)\n//     previousRows.push(this.state.currentRow)\n\n//     this.setState({\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: this.state.activeRowIndex + 1,\n//       previousFeedback: previousFeedback,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n\n//   }\n\n//   newGame() {\n    \n//     const code = []\n//     for (let i = 0; i < 4; i++) {\n//       code.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     console.log('new Game')\n//     this.setState({\n//       activeRowIndex: 0,\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: ['', '', '', ''],\n//       feedback: [0, 0, 0, 0],\n//       code: code,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport Board from \"./board\";\nimport Colors from \"./colors\";\nimport {Solution} from \"./solution\";\n\n/**\n *\n * @returns 1. infinite loop  ///because of re-rendering\n * 2. how to write if we want to invoke set only once //useEffect\n * 3. how does Set work // it's function like setter\n * 4. Component life cycle ...... \n      a. ComponentDidMount : initialized\n      b. ComponentDidUpdate : Update |-->|\n                                     |<--|\n      c. ComponentWillUnmont : Destroy\n      Follow this link to know more :\n      https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n      context API ()\n\n */\nconst colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\n  const [activeColor, setActiveColor] = useState(\"red\");\n  const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n  const [canCheck, setCanCheck] = useState(false);\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false);\nexport const gameRow = {\n  colors: colors,\n  activeColor: activeColor,\n  activeRowIndex: activeRowIndex,\n  totalRows: totalRows,\n  previousRows: previousRows,\n  previousFeedback: previousFeedback,\n  currentRow: currentRow,\n  feedback: feedback,\n  code: code,\n  canCheck: canCheck,\n  victory: victory,\n  defeat: defeat\n};\n\nfunction Game() {\n  \n  const code = [];\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n  \n  // const gameRow = {\n  //   colors: colors,\n  //   activeColor: activeColor,\n  //   activeRowIndex: activeRowIndex,\n  //   totalRows: totalRows,\n  //   previousRows: previousRows,\n  //   previousFeedback: previousFeedback,\n  //   currentRow: currentRow,\n  //   feedback: feedback,\n  //   code: code,\n  //   canCheck: canCheck,\n  //   victory: victory,\n  //   defeat: defeat\n  // };\n\n  const activateColor = (color) => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  };\n\n  // const ActivateCurrentRow = (activeRow) => {\n  //   useEffect(()=>{\n  //     setCurrentRow(activeRow);\n  //   }, [activeRow])\n  // }\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n    const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    console.log(\"row\");\n    console.log(rowId);\n    const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    console.log(\"peg\");\n    console.log(pegId);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      console.log(activeRow);\n      //ActivateCurrentRow(activeRow);\n      setCurrentRow(activeRow);\n      console.log(currentRow);\n      //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        console.log(\"length\");\n        console.log(activeRow[i].length);\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n      console.log(\"array\");\n      console.log(isArrayFull);\n      if (isArrayFull >= activeRow.length) {\n        console.log(\"yes\");\n        setCanCheck(true);\n        //gameRow.canCheck = true\n      } else {\n        setCanCheck(false);\n        //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    }\n    //partially\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n    hints.sort((a, b) => b - a);\n\n    let win = true;\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n\n    /* updating board */\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n  const newGame = () => {\n    const secretCode = [];\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n    this.code = secretCode;\n    console.log(\"new Game\");\n\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n    setTotalRows(10);\n  };\n\n  return (\n    <div className=\"game\">\n      {/* <p>HIIIIIIIIII</p>\n            <h1>hi </h1> */}\n\n      <Colors\n        list={colors}\n        activeColor={gameRow.activeColor}\n        action={activateColor}\n      />\n\n      <Board \n        state={gameRow} \n        pegAction={setColor} \n        checkAction={checkRow} />\n\n      {/* <p className='msg'> {msg} </p>            */}\n      <Solution state={gameRow} newGame={newGame} />\n    </div>\n  );\n}\n\nexport default Game;\n\n\n\n\n\n\n\n\n// //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n\n\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n  \n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n    \n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n    \n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n    \n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n    \n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n    \n//       }\n//     const newGame = () => {\n    \n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n    \n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n  \n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n      \n// }\n\n// export default Game;\n"]},"metadata":{},"sourceType":"module"}