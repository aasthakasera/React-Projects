{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Board from \"./board\";\nimport Colors from \"./colors\";\nimport Solution from \"./solution\";\n/**\n *\n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const [activeColor, setActiveColor] = useState(\"red\");\n  const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n  const [canCheck, setCanCheck] = useState(false);\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false);\n  const gameRow = {\n    colors: colors,\n    activeColor: activeColor,\n    activeRowIndex: activeRowIndex,\n    totalRows: totalRows,\n    previousRows: previousRows,\n    previousFeedback: previousFeedback,\n    currentRow: currentRow,\n    feedback: feedback,\n    code: code,\n    canCheck: canCheck,\n    victory: victory,\n    defeat: defeat\n  };\n\n  const activateColor = color => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    console.log(\"row\");\n    console.log(rowId);\n    const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    console.log(\"peg\");\n    console.log(pegId);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      console.log(activeRow);\n      setCurrentRow(activeRow);\n      console.log(currentRow); //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        console.log(\"length\");\n        console.log(activeRow[i].length);\n\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      console.log(\"array\");\n      console.log(isArrayFull);\n\n      if (isArrayFull >= activeRow.length) {\n        console.log(\"yes\");\n        setCanCheck(true); //gameRow.canCheck = true\n      } else {\n        setCanCheck(false); //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially\n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log(\"new Game\");\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n    setTotalRows(10);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: gameRow.activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: gameRow,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: gameRow,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Game, \"QbSn/1wqxkV0QdtbUy39jj/Sc/Q=\");\n\n_c = Game;\nexport default Game; // //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n//       }\n//     const newGame = () => {\n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n// }\n// export default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Board","Colors","Solution","Game","colors","code","i","push","Math","floor","random","activeColor","setActiveColor","currentRow","setCurrentRow","canCheck","setCanCheck","previousRows","setPreviousRows","previousFeedback","setPreviousFeedback","feedback","setFeedback","activeRowIndex","setRowIndex","totalRows","setTotalRows","victory","setVictory","defeat","setDefeat","gameRow","activateColor","color","setColor","id","console","log","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","newGame","state"],"mappings":"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CA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA","sourcesContent":["import React, { useState } from \"react\";\nimport Board from \"./board\";\nimport Colors from \"./colors\";\nimport Solution from \"./solution\";\n\n/**\n *\n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nfunction Game() {\n  const colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\n  const code = [];\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n  const [activeColor, setActiveColor] = useState(\"red\");\n  const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n  const [canCheck, setCanCheck] = useState(false);\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false);\n  const gameRow = {\n    colors: colors,\n    activeColor: activeColor,\n    activeRowIndex: activeRowIndex,\n    totalRows: totalRows,\n    previousRows: previousRows,\n    previousFeedback: previousFeedback,\n    currentRow: currentRow,\n    feedback: feedback,\n    code: code,\n    canCheck: canCheck,\n    victory: victory,\n    defeat: defeat\n  };\n\n  const activateColor = (color) => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n    const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    console.log(\"row\");\n    console.log(rowId);\n    const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    console.log(\"peg\");\n    console.log(pegId);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      console.log(activeRow);\n      setCurrentRow(activeRow);\n      console.log(currentRow);\n      //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        console.log(\"length\");\n        console.log(activeRow[i].length);\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n      console.log(\"array\");\n      console.log(isArrayFull);\n      if (isArrayFull >= activeRow.length) {\n        console.log(\"yes\");\n        setCanCheck(true);\n        //gameRow.canCheck = true\n      } else {\n        setCanCheck(false);\n        //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    }\n    //partially\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n    hints.sort((a, b) => b - a);\n\n    let win = true;\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n\n    /* updating board */\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n  const newGame = () => {\n    const secretCode = [];\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n    this.code = secretCode;\n    console.log(\"new Game\");\n\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow([\"\", \"\", \"\", \"\"]);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n    setTotalRows(10);\n  };\n\n  return (\n    <div className=\"game\">\n      {/* <p>HIIIIIIIIII</p>\n            <h1>hi </h1> */}\n\n      <Colors\n        list={colors}\n        activeColor={gameRow.activeColor}\n        action={activateColor}\n      />\n\n      <Board state={gameRow} pegAction={setColor} checkAction={checkRow} />\n\n      {/* <p className='msg'> {msg} </p>            */}\n      <Solution state={gameRow} newGame={newGame} />\n    </div>\n  );\n}\n\nexport default Game;\n\n\n\n\n\n\n\n\n// //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n\n\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n  \n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n    \n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n    \n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n    \n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n    \n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n    \n//       }\n//     const newGame = () => {\n    \n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n    \n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n  \n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n      \n// }\n\n// export default Game;\n"]},"metadata":{},"sourceType":"module"}