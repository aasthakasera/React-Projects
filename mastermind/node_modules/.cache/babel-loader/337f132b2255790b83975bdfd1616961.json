{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const [activeColor, setActiveColor] = useState('red');\n  const [currentRow, setCurrentRow] = useState(['', '', '', '']);\n  const [canCheck, setCanCheck] = useState(false);\n  const gameRow = {\n    colors: colors,\n    activeColor: activeColor,\n    activeRowIndex: 0,\n    totalRows: 10,\n    previousRows: [],\n    previousFeedback: [],\n    currentRow: currentRow,\n    Feedback: [0, 0, 0, 0],\n    code: code,\n    canCheck: canCheck,\n    victory: false,\n    defeat: false\n  }; // const [previousRows, setPreviousRows] = useState([]);\n  // const [previousFeedback, setPreviousFeedback] = useState([]);\n  // const [feedback, setFeedback] = useState([0,0,0,0]);\n  // const [activeRowIndex, setRowIndex] = useState(0);\n  // const [totalRows, setTotalRows] = useState(10);\n  // const [victory, setVictory] = useState(false);\n  // const [defeat, setDefeat] = useState(false);\n\n  const activateColor = color => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      setCurrentRow(activeRow); //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= activeRow.length) {\n        setCanCheck(true); //gameRow.canCheck = true\n      } else {\n        setCanCheck(false); //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.Feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially \n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    gameRow.setState({\n      Feedback: [0, 0, 0, 0],\n      activeRowIndex: gameRow.activeRowIndex + 1,\n      previousHints: gameRow.previousFeedback,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRow,\n      canCheck: false,\n      victory: win,\n      defeat: loss\n    }); // setFeedback([0, 0, 0, 0])\n    // setRowIndex(activeRowIndex+1)\n    // setPreviousFeedback(previousHints)\n    // setCurrentRow(['','','',''])\n    // setPreviousRows(previousRow)\n    // setCanCheck(false)\n    // setVictory(win)\n    // setDefeat(loss)\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log('new Game');\n    gameRow.setState({\n      activeRow: 0,\n      previousRows: [],\n      previousHints: [],\n      currentRow: ['', '', '', ''],\n      hints: [0, 0, 0, 0],\n      code: secretCode,\n      canCheck: false,\n      victory: false,\n      defeat: false\n    }); // setRowIndex(0)\n    // setPreviousRows([])\n    // setPreviousFeedback([])\n    // setCurrentRow(['','','',''])\n    // setFeedback([0,0,0,0])\n    // setCanCheck(false)\n    // setVictory(false)\n    // setDefeat(false)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: gameRow.activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: gameRow,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: gameRow,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"Dw7TvollgXAe0JBjnqi1SOFT72M=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Board","Colors","Solution","Game","colors","code","i","push","Math","floor","random","activeColor","setActiveColor","currentRow","setCurrentRow","canCheck","setCanCheck","gameRow","activeRowIndex","totalRows","previousRows","previousFeedback","Feedback","victory","defeat","activateColor","color","setColor","id","console","log","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","setState","newGame","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\n\nfunction Game() {\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n    const [activeColor, setActiveColor] = useState('red');\n    const [currentRow, setCurrentRow] = useState(['','','','']);\n    const [canCheck, setCanCheck] = useState(false);\n    const gameRow = {\n      colors: colors,\n      activeColor: activeColor,\n      activeRowIndex: 0,\n      totalRows : 10,\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: currentRow,\n      Feedback: [0, 0, 0, 0],\n      code: code,\n      canCheck: canCheck,\n      victory: false,\n      defeat: false,\n    }\n    \n    // const [previousRows, setPreviousRows] = useState([]);\n    // const [previousFeedback, setPreviousFeedback] = useState([]);\n    \n    // const [feedback, setFeedback] = useState([0,0,0,0]);\n    // const [activeRowIndex, setRowIndex] = useState(0);\n    // const [totalRows, setTotalRows] = useState(10);\n    \n    // const [victory, setVictory] = useState(false);\n    // const [defeat, setDefeat] = useState(false);\n\n\n    \n    \n    const activateColor = (color) => {\n        //gameRow.activeColor = color\n        setActiveColor(color)\n      }\n\n    const setColor = (color, id) => {\n        if (gameRow.victory) {\n          console.log(\"loose\")\n          return false\n        }\n        const rowId = +id.substr(1, id.indexOf('-') - 1)\n        const pegId = +id.substr(id.indexOf('-') + 1)\n        let activeRow = currentRow\n        let isArrayFull = 0\n    \n        if (gameRow.activeRowIndex === rowId && color) {\n          activeRow[pegId] = color\n          setCurrentRow(activeRow)\n          //gameRow.currentRow = activeRow\n\n          for (let i in activeRow) {\n            if (activeRow[i].length > 0) {\n              isArrayFull++;\n            }\n          }\n          if (isArrayFull >= activeRow.length) {\n              setCanCheck(true)\n              //gameRow.canCheck = true\n          } else {\n            setCanCheck(false)\n            //gameRow.canCheck = false\n          }\n        }\n      }\n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow))\n        const secretCode = JSON.parse(JSON.stringify(gameRow.code))\n        const hints = gameRow.Feedback\n        const previousHints = gameRow.previousFeedback\n        const previousRow = gameRow.previousRows\n    \n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n        //partially \n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n        hints.sort((a, b) => (b - a))\n\n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        let loss = gameRow.defeat;\n        if (gameRow.activeRowIndex >= gameRow.totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        gameRow.setState({\n          Feedback: [0, 0, 0, 0],\n          activeRowIndex: gameRow.activeRowIndex + 1,\n          previousHints: gameRow.previousFeedback,\n          currentRow: ['', '', '', ''],\n          previousRows: previousRow,\n          canCheck: false,\n          victory: win,\n          defeat: loss,\n        })\n\n        // setFeedback([0, 0, 0, 0])\n        // setRowIndex(activeRowIndex+1)\n        // setPreviousFeedback(previousHints)\n        // setCurrentRow(['','','',''])\n        // setPreviousRows(previousRow)\n        // setCanCheck(false)\n        // setVictory(win)\n        // setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n        this.code = secretCode\n        console.log('new Game')\n        gameRow.setState({\n          activeRow: 0,\n          previousRows: [],\n          previousHints: [],\n          currentRow: ['', '', '', ''],\n          hints: [0, 0, 0, 0],\n          code: secretCode,\n          canCheck: false,\n          victory: false,\n          defeat: false,\n        })\n\n        // setRowIndex(0)\n        // setPreviousRows([])\n        // setPreviousFeedback([])\n        // setCurrentRow(['','','',''])\n        // setFeedback([0,0,0,0])\n        // setCanCheck(false)\n        // setVictory(false)\n        // setDefeat(false)\n      }\n    \n    return (\n        <div className='game'>\n            {/* <p>HIIIIIIIIII</p>\n            <h1>hi </h1> */}\n  \n          <Colors\n            list={colors}\n            activeColor={gameRow.activeColor}\n            action={activateColor} />\n\n          <Board\n            state={gameRow}\n            pegAction={setColor}\n            checkAction={checkRow} />\n\n        {/* <p className='msg'> {msg} </p>            */}\n          <Solution\n            state={gameRow}\n            newGame={newGame} />\n          </div>\n      );  \n      \n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}