{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\nimport React, { useState } from 'react';\nimport { Board } from './board';\nimport Colors from './colors';\nimport { Solution } from './solution';\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const gameRow = {\n    colors: colors,\n    activeColor: 'red',\n    activeRowIndex: 0,\n    previousRows: [],\n    previousFeedback: [],\n    currentRow: ['', '', '', ''],\n    Feedback: [0, 0, 0, 0],\n    code: code,\n    canCheck: false,\n    victory: false,\n    defeat: false\n  }; // const [activeColor, setActiveColor] = useState('red');\n  // const [previousRows, setPreviousRows] = useState([]);\n  // const [previousFeedback, setPreviousFeedback] = useState([]);\n  // const [currentRow, setCurrentRow] = useState(['','','','']);\n  // const [feedback, setFeedback] = useState([0,0,0,0]);\n  // const [activeRowIndex, setRowIndex] = useState(0);\n  // const [totalRows, setTotalRows] = useState(10);\n  // const [canCheck, setCanCheck] = useState(false);\n  // const [victory, setVictory] = useState(false);\n  // const [defeat, setDefeat] = useState(false);\n\n  const activateColor = color => {\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      setCurrentRow(activeRow);\n\n      for (let i in activeRow) {\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= activeRow.length) {\n        setCanCheck(true);\n      } else {\n        setCanCheck(false);\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(currentRow));\n    const secretCode = JSON.parse(JSON.stringify(code));\n    const hints = feedback;\n    const previousHints = previousFeedback;\n    const previousRow = previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially \n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = defeat;\n\n    if (activeRowIndex >= totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow(['', '', '', '']);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log('new Game');\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow(['', '', '', '']);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"HIIIIIIIIII\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Board","Colors","Solution","Game","colors","code","i","push","Math","floor","random","gameRow","activeColor","activeRowIndex","previousRows","previousFeedback","currentRow","Feedback","canCheck","victory","defeat","activateColor","color","setActiveColor","setColor","id","rowId","substr","indexOf","pegId","activeRow","isArrayFull","setCurrentRow","length","setCanCheck","checkRow","JSON","parse","stringify","secretCode","hints","feedback","previousHints","previousRow","j","win","loss","totalRows","setFeedback","setRowIndex","setPreviousFeedback","setPreviousRows","setVictory","setDefeat","newGame","state","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Board } from './board';\nimport Colors from './colors';\nimport { Solution } from './solution';\n\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nfunction Game() {\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n\n    const gameRow = {\n      colors: colors,\n      activeColor: 'red',\n      activeRowIndex: 0,\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: ['', '', '', ''],\n      Feedback: [0, 0, 0, 0],\n      code: code,\n      canCheck: false,\n      victory: false,\n      defeat: false,\n    }\n    // const [activeColor, setActiveColor] = useState('red');\n    // const [previousRows, setPreviousRows] = useState([]);\n    // const [previousFeedback, setPreviousFeedback] = useState([]);\n    // const [currentRow, setCurrentRow] = useState(['','','','']);\n    // const [feedback, setFeedback] = useState([0,0,0,0]);\n    // const [activeRowIndex, setRowIndex] = useState(0);\n    // const [totalRows, setTotalRows] = useState(10);\n    // const [canCheck, setCanCheck] = useState(false);\n    // const [victory, setVictory] = useState(false);\n    // const [defeat, setDefeat] = useState(false);\n\n\n    \n    \n    const activateColor = (color) => {\n        setActiveColor(color)\n      }\n\n    const setColor = (color, id) => {\n        if (victory) {\n          return false\n        }\n        const rowId = +id.substr(1, id.indexOf('-') - 1)\n        const pegId = +id.substr(id.indexOf('-') + 1)\n        let activeRow = currentRow\n        let isArrayFull = 0\n    \n        if (activeRowIndex === rowId && color) {\n          activeRow[pegId] = color\n          setCurrentRow(activeRow)\n\n          for (let i in activeRow) {\n            if (activeRow[i].length > 0) {\n              isArrayFull++;\n            }\n          }\n          if (isArrayFull >= activeRow.length) {\n              setCanCheck(true)\n          } else {\n              setCanCheck(false)\n          }\n        }\n      }\n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(currentRow))\n        const secretCode = JSON.parse(JSON.stringify(code))\n        const hints = feedback\n        const previousHints = previousFeedback\n        const previousRow = previousRows\n    \n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n        //partially \n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n    \n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        let loss = defeat;\n        if (activeRowIndex >= totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        setFeedback([0, 0, 0, 0])\n        setRowIndex(activeRowIndex+1)\n        setPreviousFeedback(previousHints)\n        setCurrentRow(['','','',''])\n        setPreviousRows(previousRow)\n        setCanCheck(false)\n        setVictory(win)\n        setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n        this.code = secretCode\n        console.log('new Game')\n\n        setRowIndex(0)\n        setPreviousRows([])\n        setPreviousFeedback([])\n        setCurrentRow(['','','',''])\n        setFeedback([0,0,0,0])\n        setCanCheck(false)\n        setVictory(false)\n        setDefeat(false)\n      }\n    \n    return (\n        <div className='game'>\n            <p>HIIIIIIIIII</p>\n            <h1>hi </h1>\n  \n          <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n\n          {/* <Board\n            state={state}\n            pegAction={setColor}\n            checkAction={checkRow} /> */}\n\n        {/* <p className='msg'> {msg} </p>            */}\n          {/* <Solution\n            state={this.state}\n            newGame={this.newGame} /> */}\n          </div>\n      );  \n      \n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}