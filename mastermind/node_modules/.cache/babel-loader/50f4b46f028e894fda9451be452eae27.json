{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\nimport React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  // const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  // const [activeColor, setActiveColor] = useState('');\n  // const [previousRows, setPreviousRows] = useState([]);\n  // const [previousFeedback, setPreviousFeedback] = useState([]);\n  // const [currentRow, setCurrentRow] = useState(['','','','']);\n  // const [feedback, setFeedback] = useState([0,0,0,0]);\n  // const [activeRowIndex, setRowIndex] = useState(0);\n  // const [totalRows, setTotalRows] = useState(10);\n  // const [code, setCode] = useState([]);\n  // const [canCheck, setCanCheck] = useState(false);\n  // const [victory, setVictory] = useState(false);\n  // const [defeat, setDefeat] = useState(false);\n  // //color = ['red', 'green', 'blue', 'orange', 'purple'];\n  // code = [];\n  // for(let i=0;i<4;i++) {\n  //     code.push(colors[Math.floor(Math.random() * 4) + 1])\n  // }\n  // const activateColor = (color) => {\n  //     setActiveColor(color)\n  //   }\n  // const setColor = (color, id) => {\n  //     if (victory) {\n  //       return false\n  //     }\n  //     const rowId = +id.substr(1, id.indexOf('-') - 1)\n  //     const pegId = +id.substr(id.indexOf('-') + 1)\n  //     let activeRow = currentRow\n  //     let isArrayFull = 0\n  //     if (activeRowIndex === rowId && color) {\n  //       activeRow[pegId] = color\n  //       setCurrentRow(activeRow)\n  //     //   this.setState({\n  //     //     currentRow: currentRow,\n  //     //   })\n  //       /* Checking if currentRow is Full */\n  //       for (let i in activeRow) {\n  //         if (activeRow[i].length > 0) {\n  //           isArrayFull++;\n  //         }\n  //       }\n  //       if (isArrayFull >= activeRow.length) {\n  //           setCanCheck(true)\n  //         // this.setState({ canCheck: true })\n  //       } else {\n  //           setCanCheck(false)\n  //         // this.setState({ canCheck: false })\n  //       }\n  //     }\n  //   }\n  // const checkRow = () => {\n  //     const activeRow = JSON.parse(JSON.stringify(currentRow))\n  //     const secretCode = JSON.parse(JSON.stringify(code))\n  //     const hints = feedback\n  //     const previousHints = previousFeedback\n  //     const previousRow = previousRows\n  //     /* Checking extact matches */\n  //     for (let i = 0; i < 4; i++) {\n  //       if (activeRow[i] === secretCode[i]) {\n  //         hints[i] = 2\n  //         delete (activeRow[i])\n  //         delete (secretCode[i])\n  //       }\n  //     }\n  //     /* Checking partial matches */\n  //     for (let i in activeRow) {\n  //       for (let j in secretCode) {\n  //         if (activeRow[i] === secretCode[j]) {\n  //           hints[i] = 1\n  //           delete (activeRow[i])\n  //           delete (secretCode[j])\n  //         }\n  //       }\n  //     }\n  //     hints.sort((a, b) => (b - a))\n  //     /* checking if player won */\n  //     let win = true\n  //     for (let i in hints) {\n  //       if (hints[i] < 2) {\n  //         win = false;\n  //         break;\n  //       }\n  //     }\n  //     /* checking if player lost */\n  //     let loss = defeat;\n  //     if (activeRowIndex >= totalRows-1) {\n  //       loss = true;\n  //     }\n  //     /* updating board */\n  //     previousHints.push(hints)\n  //     previousRow.push(activeRow)\n  //     setFeedback([0, 0, 0, 0])\n  //     setRowIndex(activeRowIndex+1)\n  //     setPreviousFeedback(previousHints)\n  //     setCurrentRow(['','','',''])\n  //     setPreviousRows(previousRow)\n  //     setCanCheck(false)\n  //     setVictory(win)\n  //     setDefeat(loss)\n  //     // this.setState({\n  //     //   hints: [0, 0, 0, 0],\n  //     //   activeRow: this.state.activeRow + 1,\n  //     //   previousHints: previousHints,\n  //     //   currentRow: ['', '', '', ''],\n  //     //   previousRows: previousRows,\n  //     //   canCheck: false,\n  //     //   victory: victory,\n  //     //   defeat: defeat,\n  //     // })\n  //   }\n  // const newGame = () => {\n  //     const secretCode = []\n  //     for (let i = 0; i < 4; i++) {\n  //         secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n  //     }\n  //     console.log('new Game')\n  //     setRowIndex(0)\n  //     setPreviousRows([])\n  //     setPreviousFeedback([])\n  //     setCurrentRow(['','','',''])\n  //     setFeedback([0,0,0,0])\n  //     setCode(secretCode)\n  //     setCanCheck(false)\n  //     setVictory(false)\n  //     setDefeat(false)\n  //     // this.setState({\n  //     //   activeRow: 0,\n  //     //   previousRows: [],\n  //     //   previousHints: [],\n  //     //   currentRow: ['', '', '', ''],\n  //     //   hints: [0, 0, 0, 0],\n  //     //   trueRow: trueRow,\n  //     //   canCheck: false,\n  //     //   victory: false,\n  //     //   defeat: false,\n  //     // })\n  //   }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"HIIIIIIIIII\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n} // export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       activeRow: 0,\n//       totalRows: 10,\n//       trueRow: trueRow,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n//     if (this.state.activeRow === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const trueRow = JSON.parse(JSON.stringify(this.state.trueRow))\n//     const hints = this.state.hints\n//     const previousHints = this.state.previousHints\n//     const previousRows = this.state.previousRows\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === trueRow[i]) {\n//         hints[i] = 2\n//         delete (currentRow[i])\n//         delete (trueRow[i])\n//       }\n//     }\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in trueRow) {\n//         if (currentRow[i] === trueRow[j]) {\n//           hints[i] = 1\n//           delete (currentRow[i])\n//           delete (trueRow[j])\n//         }\n//       }\n//     }\n//     hints.sort((a, b) => (b - a))\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRow >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n//     /* updating board */\n//     previousHints.push(hints)\n//     previousRows.push(this.state.currentRow)\n//     this.setState({\n//       hints: [0, 0, 0, 0],\n//       activeRow: this.state.activeRow + 1,\n//       previousHints: previousHints,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n//   }\n//   newGame() {\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     console.log('new Game')\n//     this.setState({\n//       activeRow: 0,\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       trueRow: trueRow,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\n\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Colors","Solution","Board","Game"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,QAAuB,UAAvB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,KAAT,QAAsB,SAAtB;;;AAEA,SAASC,IAAT,GAAgsBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAsjWSA,I;AAkWR,eAAeA,IAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Colors } from './colors';\nimport { Solution } from './solution';\nimport { Board } from './board';\n\nfunction Game() {\n    // const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    // const [activeColor, setActiveColor] = useState('');\n    // const [previousRows, setPreviousRows] = useState([]);\n    // const [previousFeedback, setPreviousFeedback] = useState([]);\n    // const [currentRow, setCurrentRow] = useState(['','','','']);\n    // const [feedback, setFeedback] = useState([0,0,0,0]);\n    // const [activeRowIndex, setRowIndex] = useState(0);\n    // const [totalRows, setTotalRows] = useState(10);\n    // const [code, setCode] = useState([]);\n    // const [canCheck, setCanCheck] = useState(false);\n    // const [victory, setVictory] = useState(false);\n    // const [defeat, setDefeat] = useState(false);\n\n\n    // //color = ['red', 'green', 'blue', 'orange', 'purple'];\n    // code = [];\n    // for(let i=0;i<4;i++) {\n    //     code.push(colors[Math.floor(Math.random() * 4) + 1])\n    // }\n    \n    // const activateColor = (color) => {\n    //     setActiveColor(color)\n    //   }\n\n    // const setColor = (color, id) => {\n    //     if (victory) {\n    //       return false\n    //     }\n    //     const rowId = +id.substr(1, id.indexOf('-') - 1)\n    //     const pegId = +id.substr(id.indexOf('-') + 1)\n    //     let activeRow = currentRow\n    //     let isArrayFull = 0\n    \n    //     if (activeRowIndex === rowId && color) {\n    //       activeRow[pegId] = color\n    //       setCurrentRow(activeRow)\n    //     //   this.setState({\n    //     //     currentRow: currentRow,\n    //     //   })\n    \n    //       /* Checking if currentRow is Full */\n    //       for (let i in activeRow) {\n    //         if (activeRow[i].length > 0) {\n    //           isArrayFull++;\n    //         }\n    //       }\n    //       if (isArrayFull >= activeRow.length) {\n    //           setCanCheck(true)\n    //         // this.setState({ canCheck: true })\n    //       } else {\n    //           setCanCheck(false)\n    //         // this.setState({ canCheck: false })\n    //       }\n    //     }\n    //   }\n    \n    // const checkRow = () => {\n    //     const activeRow = JSON.parse(JSON.stringify(currentRow))\n    //     const secretCode = JSON.parse(JSON.stringify(code))\n    //     const hints = feedback\n    //     const previousHints = previousFeedback\n    //     const previousRow = previousRows\n    \n    //     /* Checking extact matches */\n    //     for (let i = 0; i < 4; i++) {\n    //       if (activeRow[i] === secretCode[i]) {\n    //         hints[i] = 2\n    //         delete (activeRow[i])\n    //         delete (secretCode[i])\n    //       }\n    //     }\n    \n    //     /* Checking partial matches */\n    //     for (let i in activeRow) {\n    //       for (let j in secretCode) {\n    //         if (activeRow[i] === secretCode[j]) {\n    //           hints[i] = 1\n    //           delete (activeRow[i])\n    //           delete (secretCode[j])\n    //         }\n    //       }\n    //     }\n    \n    //     hints.sort((a, b) => (b - a))\n    \n    //     /* checking if player won */\n    //     let win = true\n    //     for (let i in hints) {\n    //       if (hints[i] < 2) {\n    //         win = false;\n    //         break;\n    //       }\n    //     }\n    \n    //     /* checking if player lost */\n    //     let loss = defeat;\n    //     if (activeRowIndex >= totalRows-1) {\n    //       loss = true;\n    //     }\n    \n    //     /* updating board */\n    //     previousHints.push(hints)\n    //     previousRow.push(activeRow)\n\n    //     setFeedback([0, 0, 0, 0])\n    //     setRowIndex(activeRowIndex+1)\n    //     setPreviousFeedback(previousHints)\n    //     setCurrentRow(['','','',''])\n    //     setPreviousRows(previousRow)\n    //     setCanCheck(false)\n    //     setVictory(win)\n    //     setDefeat(loss)\n    \n    //     // this.setState({\n    //     //   hints: [0, 0, 0, 0],\n    //     //   activeRow: this.state.activeRow + 1,\n    //     //   previousHints: previousHints,\n    //     //   currentRow: ['', '', '', ''],\n    //     //   previousRows: previousRows,\n    //     //   canCheck: false,\n    //     //   victory: victory,\n    //     //   defeat: defeat,\n    //     // })\n    \n    //   }\n    // const newGame = () => {\n    \n    //     const secretCode = []\n    //     for (let i = 0; i < 4; i++) {\n    //         secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n    //     }\n    \n    //     console.log('new Game')\n\n    //     setRowIndex(0)\n    //     setPreviousRows([])\n    //     setPreviousFeedback([])\n    //     setCurrentRow(['','','',''])\n    //     setFeedback([0,0,0,0])\n    //     setCode(secretCode)\n    //     setCanCheck(false)\n    //     setVictory(false)\n    //     setDefeat(false)\n\n    //     // this.setState({\n    //     //   activeRow: 0,\n    //     //   previousRows: [],\n    //     //   previousHints: [],\n    //     //   currentRow: ['', '', '', ''],\n    //     //   hints: [0, 0, 0, 0],\n    //     //   trueRow: trueRow,\n    //     //   canCheck: false,\n    //     //   victory: false,\n    //     //   defeat: false,\n    //     // })\n    //   }\n    \n    return (\n        <div className='game-container'>\n            <p>HIIIIIIIIII</p>\n            <h1>hi </h1>\n  \n          {/* <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n  \n          <Board\n            state={Game}\n            pegAction={setColor}\n            checkAction={checkRow} />\n  \n          {/* <p className='msg'> {msg} </p>            */}\n          {/* <Solution\n            state={Game}\n            newGame={newGame} /> } */}\n        </div>\n      );  \n      \n}\n\n// export class Game extends React.Component {\n//   constructor(props) {\n//     super(props)\n\n//     this.activateColor = this.activateColor.bind(this)\n//     this.setColor = this.setColor.bind(this)\n//     this.checkRow = this.checkRow.bind(this)\n//     this.newGame = this.newGame.bind(this)\n\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple']\n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }   \n\n//     this.state = {\n//       colors: colors,\n//       activeColor: 'red',\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       activeRow: 0,\n//       totalRows: 10,\n//       trueRow: trueRow,\n//       canCheck: false,    //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false,\n//     }\n//   }\n\n//   activateColor(color) {\n//     this.setState({\n//       activeColor: color,\n//     })\n//   }\n\n//   setColor(color, id) {\n//     if (this.state.victory) {\n//       return false\n//     }\n//     const rowId = +id.substr(1, id.indexOf('-') - 1)\n//     const pegId = +id.substr(id.indexOf('-') + 1)\n//     let currentRow = this.state.currentRow\n//     let isArrayFull = 0\n\n//     if (this.state.activeRow === rowId && color) {\n//       currentRow[pegId] = color\n//       this.setState({\n//         currentRow: currentRow,\n//       })\n\n//       /* Checking if currentRow is Full */\n//       for (let i in currentRow) {\n//         if (currentRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       if (isArrayFull >= currentRow.length) {\n//         this.setState({ canCheck: true })\n//       } else {\n//         this.setState({ canCheck: false })\n//       }\n//     }\n//   }\n\n//   checkRow() {\n//     const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//     const trueRow = JSON.parse(JSON.stringify(this.state.trueRow))\n//     const hints = this.state.hints\n//     const previousHints = this.state.previousHints\n//     const previousRows = this.state.previousRows\n\n//     /* Checking extact matches */\n//     for (let i = 0; i < 4; i++) {\n//       if (currentRow[i] === trueRow[i]) {\n//         hints[i] = 2\n//         delete (currentRow[i])\n//         delete (trueRow[i])\n//       }\n//     }\n\n//     /* Checking partial matches */\n//     for (let i in currentRow) {\n//       for (let j in trueRow) {\n//         if (currentRow[i] === trueRow[j]) {\n//           hints[i] = 1\n//           delete (currentRow[i])\n//           delete (trueRow[j])\n//         }\n//       }\n//     }\n\n//     hints.sort((a, b) => (b - a))\n\n//     /* checking if player won */\n//     let victory = true\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         victory = false;\n//         break;\n//       }\n//     }\n\n//     /* checking if player lost */\n//     let defeat = this.state.defeat;\n//     if (this.state.activeRow >= this.state.totalRows-1) {\n//       defeat = true;\n//     }\n\n//     /* updating board */\n//     previousHints.push(hints)\n//     previousRows.push(this.state.currentRow)\n\n//     this.setState({\n//       hints: [0, 0, 0, 0],\n//       activeRow: this.state.activeRow + 1,\n//       previousHints: previousHints,\n//       currentRow: ['', '', '', ''],\n//       previousRows: previousRows,\n//       canCheck: false,\n//       victory: victory,\n//       defeat: defeat,\n//     })\n\n//   }\n\n//   newGame() {\n    \n//     const trueRow = []\n//     for (let i = 0; i < 4; i++) {\n//       trueRow.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     console.log('new Game')\n//     this.setState({\n//       activeRow: 0,\n//       previousRows: [],\n//       previousHints: [],\n//       currentRow: ['', '', '', ''],\n//       hints: [0, 0, 0, 0],\n//       trueRow: trueRow,\n//       canCheck: false,\n//       victory: false,\n//       defeat: false,\n//     })\n//   }\n\n//   render() {\n//     let msg = this.state.victory ? 'You Win!!' :\n//                ( this.state.defeat ? 'You Lost :(' : '')\n//     return (\n//       <div className='game-container'>\n\n//         <Colors\n//           list={this.state.colors}\n//           activeColor={this.state.activeColor}\n//           action={this.activateColor} />\n\n//         <Board\n//           state={this.state}\n//           pegAction={this.setColor}\n//           checkAction={this.checkRow} />\n\n//         <p className='msg'> {msg} </p>           \n//         <Solution\n//           state={this.state}\n//           newGame={this.newGame} />\n//       </div>\n//     );\n//   }\n// }\n export default Game;\n"]},"metadata":{},"sourceType":"module"}