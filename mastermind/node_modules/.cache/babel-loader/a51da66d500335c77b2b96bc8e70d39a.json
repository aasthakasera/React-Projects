{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const currentRow = ['', '', '', ''];\n  const [activeColor, setActiveColor] = useState('red'); //const [currentRow, setCurrentRow] = useState(['','','','']);\n\n  const [canCheck, setCanCheck] = useState(false);\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false);\n  const gameRow = {\n    colors: colors,\n    activeColor: activeColor,\n    activeRowIndex: activeRowIndex,\n    totalRows: totalRows,\n    previousRows: previousRows,\n    previousFeedback: previousFeedback,\n    currentRow: currentRow,\n    Feedback: feedback,\n    code: code,\n    canCheck: canCheck,\n    victory: victory,\n    defeat: defeat\n  };\n\n  const activateColor = color => {\n    //gameRow.activeColor = color\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (gameRow.victory) {\n      console.log(\"loose\");\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    console.log(\"row\");\n    console.log(rowId);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    console.log(\"peg\");\n    console.log(pegId);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (gameRow.activeRowIndex === rowId && color) {\n      //gameRow.currentRow[pegId] = color\n      activeRow[pegId] = color;\n      console.log(activeRow);\n      gameRow.currentRow = activeRow; //setCurrentRow(activeRow)\n\n      console.log(currentRow); //gameRow.currentRow = activeRow\n\n      for (let i in activeRow) {\n        console.log(\"length\");\n        console.log(activeRow[i].length);\n\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      console.log(\"array\");\n      console.log(isArrayFull);\n\n      if (isArrayFull >= activeRow.length) {\n        console.log(\"yes\");\n        setCanCheck(true); //gameRow.canCheck = true\n      } else {\n        setCanCheck(false); //gameRow.canCheck = false\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n    const hints = gameRow.Feedback;\n    const previousHints = gameRow.previousFeedback;\n    const previousRow = gameRow.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially \n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = gameRow.defeat;\n\n    if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow); // this.setState({\n    //   Feedback: [0, 0, 0, 0],\n    //   activeRowIndex: gameRow.activeRowIndex + 1,\n    //   previousHints: gameRow.previousFeedback,\n    //   currentRow: ['', '', '', ''],\n    //   previousRows: previousRow,\n    //   canCheck: false,\n    //   victory: win,\n    //   defeat: loss,\n    // })\n\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints); //setCurrentRow(['','','',''])\n\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log('new Game');\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]); //setCurrentRow(['','','',''])\n\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n    setTotalRows(10);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: gameRow,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: gameRow,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"66msuEcaUXvdaLCivRVV7qL08bQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Board","Colors","Solution","Game","colors","code","i","push","Math","floor","random","currentRow","activeColor","setActiveColor","canCheck","setCanCheck","previousRows","setPreviousRows","previousFeedback","setPreviousFeedback","feedback","setFeedback","activeRowIndex","setRowIndex","totalRows","setTotalRows","victory","setVictory","defeat","setDefeat","gameRow","Feedback","activateColor","color","setColor","id","console","log","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","newGame","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\n\nfunction Game() {\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n    const currentRow = ['','','',''];\n    const [activeColor, setActiveColor] = useState('red');\n    //const [currentRow, setCurrentRow] = useState(['','','','']);\n    const [canCheck, setCanCheck] = useState(false);\n    const [previousRows, setPreviousRows] = useState([]);\n    const [previousFeedback, setPreviousFeedback] = useState([]);\n    const [feedback, setFeedback] = useState([0,0,0,0]);\n    const [activeRowIndex, setRowIndex] = useState(0);\n    const [totalRows, setTotalRows] = useState(10);\n    const [victory, setVictory] = useState(false);\n    const [defeat, setDefeat] = useState(false);\n    const gameRow = {\n      colors: colors,\n      activeColor: activeColor,\n      activeRowIndex: activeRowIndex,\n      totalRows : totalRows,\n      previousRows: previousRows,\n      previousFeedback: previousFeedback,\n      currentRow: currentRow,\n      Feedback: feedback,\n      code: code,\n      canCheck: canCheck,\n      victory: victory,\n      defeat: defeat,\n    }\n  \n    const activateColor = (color) => {\n        //gameRow.activeColor = color\n        setActiveColor(color)\n      }\n\n    const setColor = (color, id) => {\n        if (gameRow.victory) {\n          console.log(\"loose\")\n          return false\n        }\n        const rowId = +id.substr(1, id.indexOf('-') - 1);\n        console.log(\"row\");\n        console.log(rowId);\n        const pegId = +id.substr(id.indexOf('-') + 1);\n        console.log(\"peg\");\n        console.log(pegId);\n        let activeRow = currentRow;\n        let isArrayFull = 0;\n    \n        if (gameRow.activeRowIndex === rowId && color) {\n          //gameRow.currentRow[pegId] = color\n          activeRow[pegId] = color\n          console.log(activeRow);\n          gameRow.currentRow = activeRow;\n          //setCurrentRow(activeRow)\n          console.log(currentRow);\n          //gameRow.currentRow = activeRow\n\n          for (let i in activeRow) {\n            console.log(\"length\");\n            console.log(activeRow[i].length);\n            if (activeRow[i].length > 0) {\n              isArrayFull++;\n            }\n          }\n          console.log(\"array\");\n          console.log(isArrayFull);\n          if (isArrayFull >= activeRow.length) {\n              console.log(\"yes\");\n              setCanCheck(true)\n              //gameRow.canCheck = true\n          } else {\n            setCanCheck(false)\n            //gameRow.canCheck = false\n          }\n        }\n      }\n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow))\n        const secretCode = JSON.parse(JSON.stringify(gameRow.code))\n        const hints = gameRow.Feedback\n        const previousHints = gameRow.previousFeedback\n        const previousRow = gameRow.previousRows\n    \n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n        //partially \n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n        hints.sort((a, b) => (b - a))\n\n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        let loss = gameRow.defeat;\n        if (gameRow.activeRowIndex >= gameRow.totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        // this.setState({\n        //   Feedback: [0, 0, 0, 0],\n        //   activeRowIndex: gameRow.activeRowIndex + 1,\n        //   previousHints: gameRow.previousFeedback,\n        //   currentRow: ['', '', '', ''],\n        //   previousRows: previousRow,\n        //   canCheck: false,\n        //   victory: win,\n        //   defeat: loss,\n        // })\n\n        setFeedback([0, 0, 0, 0])\n        setRowIndex(activeRowIndex+1)\n        setPreviousFeedback(previousHints)\n        //setCurrentRow(['','','',''])\n        setPreviousRows(previousRow)\n        setCanCheck(false)\n        setVictory(win)\n        setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n        this.code = secretCode\n        console.log('new Game')\n\n        setRowIndex(0)\n        setPreviousRows([])\n        setPreviousFeedback([])\n        //setCurrentRow(['','','',''])\n        setFeedback([0,0,0,0])\n        setCanCheck(false)\n        setVictory(false)\n        setDefeat(false)\n        setTotalRows(10)\n      }\n    \n    return (\n        <div className='game'>\n            {/* <p>HIIIIIIIIII</p>\n            <h1>hi </h1> */}\n  \n          <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n\n          <Board\n            state={gameRow}\n            pegAction={setColor}\n            checkAction={checkRow} />\n\n        {/* <p className='msg'> {msg} </p>            */}\n          <Solution\n            state={gameRow}\n            newGame={newGame} />\n          </div>\n      );  \n      \n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}