{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\nimport React from 'react';\nimport Colors from './colors';\nimport { Solution } from './solution';\nimport Board from './board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.activateColor = this.activateColor.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.checkRow = this.checkRow.bind(this);\n    this.newGame = this.newGame.bind(this);\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const code = [];\n\n    for (let i = 0; i < 4; i++) {\n      code.push(colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.state = {\n      colors: colors,\n      activeColor: 'red',\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: ['', '', '', ''],\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: 0,\n      totalRows: 10,\n      code: code // canCheck: false,    //this checks if it's ok to eval currentRow\n      // victory: false,\n      // defeat: false,\n\n    };\n    this.game = {\n      canCheck: false,\n      //this checks if it's ok to eval currentRow\n      victory: false,\n      defeat: false\n    };\n  }\n\n  activateColor(color) {\n    this.setState({\n      activeColor: color\n    });\n  }\n\n  setColor(color, id) {\n    if (this.state.victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let currentRow = this.state.currentRow;\n    let isArrayFull = 0;\n\n    if (this.state.activeRowIndex === rowId && color) {\n      currentRow[pegId] = color;\n      this.setState({\n        currentRow: currentRow\n      });\n      /* Checking if currentRow is Full */\n\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= currentRow.length) {\n        this.setState({\n          canCheck: true\n        });\n      } else {\n        this.setState({\n          canCheck: false\n        });\n      }\n    }\n  }\n\n  checkRow() {\n    const currentRow = JSON.parse(JSON.stringify(this.state.currentRow));\n    const code = JSON.parse(JSON.stringify(this.state.code));\n    const feedback = this.state.feedback;\n    const previousFeedback = this.state.previousFeedback;\n    const previousRows = this.state.previousRows;\n    /* Checking extact matches */\n\n    for (let i = 0; i < 4; i++) {\n      if (currentRow[i] === code[i]) {\n        feedback[i] = 2;\n        delete currentRow[i];\n        delete code[i];\n      }\n    }\n    /* Checking partial matches */\n\n\n    for (let i in currentRow) {\n      for (let j in code) {\n        if (currentRow[i] === code[j]) {\n          feedback[i] = 1;\n          delete currentRow[i];\n          delete code[j];\n        }\n      }\n    }\n\n    feedback.sort((a, b) => b - a);\n    /* checking if player won */\n\n    let victory = true;\n\n    for (let i in feedback) {\n      if (feedback[i] < 2) {\n        victory = false;\n        break;\n      }\n    }\n    /* checking if player lost */\n\n\n    let defeat = this.state.defeat;\n\n    if (this.state.activeRowIndex >= this.state.totalRows - 1) {\n      defeat = true;\n    }\n    /* updating board */\n\n\n    previousFeedback.push(feedback);\n    previousRows.push(this.state.currentRow);\n    this.setState({\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: this.state.activeRowIndex + 1,\n      previousFeedback: previousFeedback,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRows,\n      canCheck: false,\n      victory: victory,\n      defeat: defeat\n    });\n  }\n\n  newGame() {\n    const code = [];\n\n    for (let i = 0; i < 4; i++) {\n      code.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    console.log('new Game');\n    this.setState({\n      activeRowIndex: 0,\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: ['', '', '', ''],\n      feedback: [0, 0, 0, 0],\n      code: code,\n      canCheck: false,\n      victory: false,\n      defeat: false\n    });\n  }\n\n  render() {\n    let msg = this.state.victory ? 'You Win!!' : this.state.defeat ? 'You Lost :(' : '';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Colors, {\n        list: this.state.colors,\n        activeColor: this.state.activeColor,\n        action: this.activateColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        state: this.state,\n        pegAction: this.setColor,\n        checkAction: this.checkRow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"msg\",\n        children: [\" \", msg, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Solution, {\n        state: this.state,\n        newGame: this.newGame\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n} // import React, { useEffect, useState } from \"react\";\n// import Board from \"./board\";\n// import Colors from \"./colors\";\n// import {Solution} from \"./solution\";\n// /**\n//  *\n//  * @returns 1. infinite loop  ///because of re-rendering\n//  * 2. how to write if we want to invoke set only once //useEffect\n//  * 3. how does Set work // it's function like setter\n//  * 4. Component life cycle ...... \n//       a. ComponentDidMount : initialized\n//       b. ComponentDidUpdate : Update |-->|\n//                                      |<--|\n//       c. ComponentWillUnmont : Destroy\n//       Follow this link to know more :\n//       https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n//       context API ()\n//  */\n// const colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\n//   const [activeColor, setActiveColor] = useState(\"red\");\n//   const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//   const [canCheck, setCanCheck] = useState(false);\n//   const [previousRows, setPreviousRows] = useState([]);\n//   const [previousFeedback, setPreviousFeedback] = useState([]);\n//   const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n//   const [activeRowIndex, setRowIndex] = useState(0);\n//   const [totalRows, setTotalRows] = useState(10);\n//   const [victory, setVictory] = useState(false);\n//   const [defeat, setDefeat] = useState(false);\n// export const gameRow = {\n//   colors: colors,\n//   activeColor: activeColor,\n//   activeRowIndex: activeRowIndex,\n//   totalRows: totalRows,\n//   previousRows: previousRows,\n//   previousFeedback: previousFeedback,\n//   currentRow: currentRow,\n//   feedback: feedback,\n//   code: code,\n//   canCheck: canCheck,\n//   victory: victory,\n//   defeat: defeat\n// };\n// function Game() {\n//   const code = [];\n//   for (let i = 0; i < 4; i++) {\n//     code.push(colors[Math.floor(Math.random() * 4) + 1]);\n//   }\n//   // const gameRow = {\n//   //   colors: colors,\n//   //   activeColor: activeColor,\n//   //   activeRowIndex: activeRowIndex,\n//   //   totalRows: totalRows,\n//   //   previousRows: previousRows,\n//   //   previousFeedback: previousFeedback,\n//   //   currentRow: currentRow,\n//   //   feedback: feedback,\n//   //   code: code,\n//   //   canCheck: canCheck,\n//   //   victory: victory,\n//   //   defeat: defeat\n//   // };\n//   const activateColor = (color) => {\n//     //gameRow.activeColor = color\n//     setActiveColor(color);\n//   };\n//   // const ActivateCurrentRow = (activeRow) => {\n//   //   useEffect(()=>{\n//   //     setCurrentRow(activeRow);\n//   //   }, [activeRow])\n//   // }\n//   const setColor = (color, id) => {\n//     if (gameRow.victory) {\n//       console.log(\"loose\");\n//       return false;\n//     }\n//     const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     console.log(\"row\");\n//     console.log(rowId);\n//     const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     console.log(\"peg\");\n//     console.log(pegId);\n//     let activeRow = currentRow;\n//     let isArrayFull = 0;\n//     if (gameRow.activeRowIndex === rowId && color) {\n//       activeRow[pegId] = color;\n//       console.log(activeRow);\n//       //ActivateCurrentRow(activeRow);\n//       setCurrentRow(activeRow);\n//       console.log(currentRow);\n//       //gameRow.currentRow = activeRow\n//       for (let i in activeRow) {\n//         console.log(\"length\");\n//         console.log(activeRow[i].length);\n//         if (activeRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       console.log(\"array\");\n//       console.log(isArrayFull);\n//       if (isArrayFull >= activeRow.length) {\n//         console.log(\"yes\");\n//         setCanCheck(true);\n//         //gameRow.canCheck = true\n//       } else {\n//         setCanCheck(false);\n//         //gameRow.canCheck = false\n//       }\n//     }\n//   };\n//   const checkRow = () => {\n//     const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n//     const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n//     const hints = gameRow.feedback;\n//     const previousHints = gameRow.previousFeedback;\n//     const previousRow = gameRow.previousRows;\n//     for (let i = 0; i < 4; i++) {\n//       if (activeRow[i] === secretCode[i]) {\n//         hints[i] = 2;\n//         delete activeRow[i];\n//         delete secretCode[i];\n//       }\n//     }\n//     //partially\n//     for (let i in activeRow) {\n//       for (let j in secretCode) {\n//         if (activeRow[i] === secretCode[j]) {\n//           hints[i] = 1;\n//           delete activeRow[i];\n//           delete secretCode[j];\n//         }\n//       }\n//     }\n//     hints.sort((a, b) => b - a);\n//     let win = true;\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         win = false;\n//         break;\n//       }\n//     }\n//     let loss = gameRow.defeat;\n//     if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n//       loss = true;\n//     }\n//     /* updating board */\n//     previousHints.push(hints);\n//     previousRow.push(activeRow);\n//     setFeedback([0, 0, 0, 0]);\n//     setRowIndex(activeRowIndex + 1);\n//     setPreviousFeedback(previousHints);\n//     setCurrentRow([\"\", \"\", \"\", \"\"]);\n//     setPreviousRows(previousRow);\n//     setCanCheck(false);\n//     setVictory(win);\n//     setDefeat(loss);\n//   };\n//   const newGame = () => {\n//     const secretCode = [];\n//     for (let i = 0; i < 4; i++) {\n//       secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n//     }\n//     this.code = secretCode;\n//     console.log(\"new Game\");\n//     setRowIndex(0);\n//     setPreviousRows([]);\n//     setPreviousFeedback([]);\n//     setCurrentRow([\"\", \"\", \"\", \"\"]);\n//     setFeedback([0, 0, 0, 0]);\n//     setCanCheck(false);\n//     setVictory(false);\n//     setDefeat(false);\n//     setTotalRows(10);\n//   };\n//   return (\n//     <div className=\"game\">\n//       {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n//       <Colors\n//         list={colors}\n//         activeColor={gameRow.activeColor}\n//         action={activateColor}\n//       />\n//       <Board \n//         state={gameRow} \n//         pegAction={setColor} \n//         checkAction={checkRow} />\n//       {/* <p className='msg'> {msg} </p>            */}\n//       <Solution state={gameRow} newGame={newGame} />\n//     </div>\n//   );\n// }\n// export default Game;\n// //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n//       }\n//     const newGame = () => {\n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n// }\n// export default Game;","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","Colors","Solution","Board","Game","Component","constructor","props","activateColor","bind","setColor","checkRow","newGame","colors","code","i","push","Math","floor","random","state","activeColor","previousRows","previousFeedback","currentRow","feedback","activeRowIndex","totalRows","game","canCheck","victory","defeat","color","setState","id","rowId","substr","indexOf","pegId","isArrayFull","length","JSON","parse","stringify","j","sort","a","b","console","log","render","msg"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;;AAGA,OAAO,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKC,QAAL,GAAgB,KAAKA,QAAL,CAAcD,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKE,QAAL,GAAgB,KAAKA,QAAL,CAAcF,IAAd,CAAmB,IAAnB,CAAhB;AACA,SAAKG,OAAL,GAAe,KAAKA,OAAL,CAAaH,IAAb,CAAkB,IAAlB,CAAf;AAEA,UAAMI,MAAM,GAAG,CAAC,KAAD,EAAQ,OAAR,EAAiB,MAAjB,EAAyB,QAAzB,EAAmC,QAAnC,CAAf;AACA,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,IAAI,CAACE,IAAL,CAAUH,MAAM,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAjC,CAAhB;AACD;;AAED,SAAKC,KAAL,GAAa;AACXP,MAAAA,MAAM,EAAEA,MADG;AAEXQ,MAAAA,WAAW,EAAE,KAFF;AAGXC,MAAAA,YAAY,EAAE,EAHH;AAIXC,MAAAA,gBAAgB,EAAE,EAJP;AAKXC,MAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CALD;AAMXC,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CANC;AAOXC,MAAAA,cAAc,EAAE,CAPL;AAQXC,MAAAA,SAAS,EAAE,EARA;AASXb,MAAAA,IAAI,EAAEA,IATK,CAUX;AACA;AACA;;AAZW,KAAb;AAeA,SAAKc,IAAL,GAAY;AACVC,MAAAA,QAAQ,EAAE,KADA;AACU;AACpBC,MAAAA,OAAO,EAAE,KAFC;AAGVC,MAAAA,MAAM,EAAE;AAHE,KAAZ;AAKD;;AAEDvB,EAAAA,aAAa,CAACwB,KAAD,EAAQ;AACnB,SAAKC,QAAL,CAAc;AACZZ,MAAAA,WAAW,EAAEW;AADD,KAAd;AAGD;;AAEDtB,EAAAA,QAAQ,CAACsB,KAAD,EAAQE,EAAR,EAAY;AAClB,QAAI,KAAKd,KAAL,CAAWU,OAAf,EAAwB;AACtB,aAAO,KAAP;AACD;;AACD,UAAMK,KAAK,GAAG,CAACD,EAAE,CAACE,MAAH,CAAU,CAAV,EAAaF,EAAE,CAACG,OAAH,CAAW,GAAX,IAAkB,CAA/B,CAAf;AACA,UAAMC,KAAK,GAAG,CAACJ,EAAE,CAACE,MAAH,CAAUF,EAAE,CAACG,OAAH,CAAW,GAAX,IAAkB,CAA5B,CAAf;AACA,QAAIb,UAAU,GAAG,KAAKJ,KAAL,CAAWI,UAA5B;AACA,QAAIe,WAAW,GAAG,CAAlB;;AAEA,QAAI,KAAKnB,KAAL,CAAWM,cAAX,KAA8BS,KAA9B,IAAuCH,KAA3C,EAAkD;AAChDR,MAAAA,UAAU,CAACc,KAAD,CAAV,GAAoBN,KAApB;AACA,WAAKC,QAAL,CAAc;AACZT,QAAAA,UAAU,EAAEA;AADA,OAAd;AAIA;;AACA,WAAK,IAAIT,CAAT,IAAcS,UAAd,EAA0B;AACxB,YAAIA,UAAU,CAACT,CAAD,CAAV,CAAcyB,MAAd,GAAuB,CAA3B,EAA8B;AAC5BD,UAAAA,WAAW;AACZ;AACF;;AACD,UAAIA,WAAW,IAAIf,UAAU,CAACgB,MAA9B,EAAsC;AACpC,aAAKP,QAAL,CAAc;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD,OAFD,MAEO;AACL,aAAKI,QAAL,CAAc;AAAEJ,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD;AACF;AACF;;AAEDlB,EAAAA,QAAQ,GAAG;AACT,UAAMa,UAAU,GAAGiB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKvB,KAAL,CAAWI,UAA1B,CAAX,CAAnB;AACA,UAAMV,IAAI,GAAG2B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKvB,KAAL,CAAWN,IAA1B,CAAX,CAAb;AACA,UAAMW,QAAQ,GAAG,KAAKL,KAAL,CAAWK,QAA5B;AACA,UAAMF,gBAAgB,GAAG,KAAKH,KAAL,CAAWG,gBAApC;AACA,UAAMD,YAAY,GAAG,KAAKF,KAAL,CAAWE,YAAhC;AAEA;;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIS,UAAU,CAACT,CAAD,CAAV,KAAkBD,IAAI,CAACC,CAAD,CAA1B,EAA+B;AAC7BU,QAAAA,QAAQ,CAACV,CAAD,CAAR,GAAc,CAAd;AACA,eAAQS,UAAU,CAACT,CAAD,CAAlB;AACA,eAAQD,IAAI,CAACC,CAAD,CAAZ;AACD;AACF;AAED;;;AACA,SAAK,IAAIA,CAAT,IAAcS,UAAd,EAA0B;AACxB,WAAK,IAAIoB,CAAT,IAAc9B,IAAd,EAAoB;AAClB,YAAIU,UAAU,CAACT,CAAD,CAAV,KAAkBD,IAAI,CAAC8B,CAAD,CAA1B,EAA+B;AAC7BnB,UAAAA,QAAQ,CAACV,CAAD,CAAR,GAAc,CAAd;AACA,iBAAQS,UAAU,CAACT,CAAD,CAAlB;AACA,iBAAQD,IAAI,CAAC8B,CAAD,CAAZ;AACD;AACF;AACF;;AAEDnB,IAAAA,QAAQ,CAACoB,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAWA,CAAC,GAAGD,CAA7B;AAEA;;AACA,QAAIhB,OAAO,GAAG,IAAd;;AACA,SAAK,IAAIf,CAAT,IAAcU,QAAd,EAAwB;AACtB,UAAIA,QAAQ,CAACV,CAAD,CAAR,GAAc,CAAlB,EAAqB;AACnBe,QAAAA,OAAO,GAAG,KAAV;AACA;AACD;AACF;AAED;;;AACA,QAAIC,MAAM,GAAG,KAAKX,KAAL,CAAWW,MAAxB;;AACA,QAAI,KAAKX,KAAL,CAAWM,cAAX,IAA6B,KAAKN,KAAL,CAAWO,SAAX,GAAqB,CAAtD,EAAyD;AACvDI,MAAAA,MAAM,GAAG,IAAT;AACD;AAED;;;AACAR,IAAAA,gBAAgB,CAACP,IAAjB,CAAsBS,QAAtB;AACAH,IAAAA,YAAY,CAACN,IAAb,CAAkB,KAAKI,KAAL,CAAWI,UAA7B;AAEA,SAAKS,QAAL,CAAc;AACZR,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADE;AAEZC,MAAAA,cAAc,EAAE,KAAKN,KAAL,CAAWM,cAAX,GAA4B,CAFhC;AAGZH,MAAAA,gBAAgB,EAAEA,gBAHN;AAIZC,MAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAJA;AAKZF,MAAAA,YAAY,EAAEA,YALF;AAMZO,MAAAA,QAAQ,EAAE,KANE;AAOZC,MAAAA,OAAO,EAAEA,OAPG;AAQZC,MAAAA,MAAM,EAAEA;AARI,KAAd;AAWD;;AAEDnB,EAAAA,OAAO,GAAG;AAER,UAAME,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,MAAAA,IAAI,CAACE,IAAL,CAAU,KAAKI,KAAL,CAAWP,MAAX,CAAkBI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,IAAgC,CAAlD,CAAV;AACD;;AAED6B,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,SAAKhB,QAAL,CAAc;AACZP,MAAAA,cAAc,EAAE,CADJ;AAEZJ,MAAAA,YAAY,EAAE,EAFF;AAGZC,MAAAA,gBAAgB,EAAE,EAHN;AAIZC,MAAAA,UAAU,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAJA;AAKZC,MAAAA,QAAQ,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CALE;AAMZX,MAAAA,IAAI,EAAEA,IANM;AAOZe,MAAAA,QAAQ,EAAE,KAPE;AAQZC,MAAAA,OAAO,EAAE,KARG;AASZC,MAAAA,MAAM,EAAE;AATI,KAAd;AAWD;;AAEDmB,EAAAA,MAAM,GAAG;AACP,QAAIC,GAAG,GAAG,KAAK/B,KAAL,CAAWU,OAAX,GAAqB,WAArB,GACG,KAAKV,KAAL,CAAWW,MAAX,GAAoB,aAApB,GAAoC,EADjD;AAEA,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BAEE,QAAC,MAAD;AACE,QAAA,IAAI,EAAE,KAAKX,KAAL,CAAWP,MADnB;AAEE,QAAA,WAAW,EAAE,KAAKO,KAAL,CAAWC,WAF1B;AAGE,QAAA,MAAM,EAAE,KAAKb;AAHf;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE,QAAC,KAAD;AACE,QAAA,KAAK,EAAE,KAAKY,KADd;AAEE,QAAA,SAAS,EAAE,KAAKV,QAFlB;AAGE,QAAA,WAAW,EAAE,KAAKC;AAHpB;AAAA;AAAA;AAAA;AAAA,cAPF,eAYE;AAAG,QAAA,SAAS,EAAC,KAAb;AAAA,wBAAqBwC,GAArB;AAAA;AAAA;AAAA;AAAA;AAAA,cAZF,eAaE,QAAC,QAAD;AACE,QAAA,KAAK,EAAE,KAAK/B,KADd;AAEE,QAAA,OAAO,EAAE,KAAKR;AAFhB;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAmBD;;AAhLuC,C,CAmsourcesContent":["import React from 'react';\nimport Colors from './colors';\nimport {Solution} from './solution';\nimport Board from './board';\n\n\nexport class Game extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.activateColor = this.activateColor.bind(this)\n    this.setColor = this.setColor.bind(this)\n    this.checkRow = this.checkRow.bind(this)\n    this.newGame = this.newGame.bind(this)\n\n    const colors = ['red', 'green', 'blue', 'orange', 'purple']\n    const code = []\n    for (let i = 0; i < 4; i++) {\n      code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }   \n\n    this.state = {\n      colors: colors,\n      activeColor: 'red',\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: ['', '', '', ''],\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: 0,\n      totalRows: 10,\n      code: code,\n      // canCheck: false,    //this checks if it's ok to eval currentRow\n      // victory: false,\n      // defeat: false,\n    }\n\n    this.game = {\n      canCheck: false,    //this checks if it's ok to eval currentRow\n      victory: false,\n      defeat: false,\n    }\n  }\n\n  activateColor(color) {\n    this.setState({\n      activeColor: color,\n    })\n  }\n\n  setColor(color, id) {\n    if (this.state.victory) {\n      return false\n    }\n    const rowId = +id.substr(1, id.indexOf('-') - 1)\n    const pegId = +id.substr(id.indexOf('-') + 1)\n    let currentRow = this.state.currentRow\n    let isArrayFull = 0\n\n    if (this.state.activeRowIndex === rowId && color) {\n      currentRow[pegId] = color\n      this.setState({\n        currentRow: currentRow,\n      })\n\n      /* Checking if currentRow is Full */\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n      if (isArrayFull >= currentRow.length) {\n        this.setState({ canCheck: true })\n      } else {\n        this.setState({ canCheck: false })\n      }\n    }\n  }\n\n  checkRow() {\n    const currentRow = JSON.parse(JSON.stringify(this.state.currentRow))\n    const code = JSON.parse(JSON.stringify(this.state.code))\n    const feedback = this.state.feedback\n    const previousFeedback = this.state.previousFeedback\n    const previousRows = this.state.previousRows\n\n    /* Checking extact matches */\n    for (let i = 0; i < 4; i++) {\n      if (currentRow[i] === code[i]) {\n        feedback[i] = 2\n        delete (currentRow[i])\n        delete (code[i])\n      }\n    }\n\n    /* Checking partial matches */\n    for (let i in currentRow) {\n      for (let j in code) {\n        if (currentRow[i] === code[j]) {\n          feedback[i] = 1\n          delete (currentRow[i])\n          delete (code[j])\n        }\n      }\n    }\n\n    feedback.sort((a, b) => (b - a))\n\n    /* checking if player won */\n    let victory = true\n    for (let i in feedback) {\n      if (feedback[i] < 2) {\n        victory = false;\n        break;\n      }\n    }\n\n    /* checking if player lost */\n    let defeat = this.state.defeat;\n    if (this.state.activeRowIndex >= this.state.totalRows-1) {\n      defeat = true;\n    }\n\n    /* updating board */\n    previousFeedback.push(feedback)\n    previousRows.push(this.state.currentRow)\n\n    this.setState({\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: this.state.activeRowIndex + 1,\n      previousFeedback: previousFeedback,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRows,\n      canCheck: false,\n      victory: victory,\n      defeat: defeat,\n    })\n\n  }\n\n  newGame() {\n    \n    const code = []\n    for (let i = 0; i < 4; i++) {\n      code.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n    }\n\n    console.log('new Game')\n    this.setState({\n      activeRowIndex: 0,\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: ['', '', '', ''],\n      feedback: [0, 0, 0, 0],\n      code: code,\n      canCheck: false,\n      victory: false,\n      defeat: false,\n    })\n  }\n\n  render() {\n    let msg = this.state.victory ? 'You Win!!' :\n               ( this.state.defeat ? 'You Lost :(' : '')\n    return (\n      <div className='game-container'>\n\n        <Colors\n          list={this.state.colors}\n          activeColor={this.state.activeColor}\n          action={this.activateColor} />\n\n        <Board\n          state={this.state}\n          pegAction={this.setColor}\n          checkAction={this.checkRow} />\n\n        <p className='msg'> {msg} </p>           \n        <Solution\n          state={this.state}\n          newGame={this.newGame} />\n      </div>\n    );\n  }\n}\n\n// import React, { useEffect, useState } from \"react\";\n// import Board from \"./board\";\n// import Colors from \"./colors\";\n// import {Solution} from \"./solution\";\n\n// /**\n//  *\n//  * @returns 1. infinite loop  ///because of re-rendering\n//  * 2. how to write if we want to invoke set only once //useEffect\n//  * 3. how does Set work // it's function like setter\n//  * 4. Component life cycle ...... \n//       a. ComponentDidMount : initialized\n//       b. ComponentDidUpdate : Update |-->|\n//                                      |<--|\n//       c. ComponentWillUnmont : Destroy\n//       Follow this link to know more :\n//       https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\n//       context API ()\n\n//  */\n// const colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\"];\n//   const [activeColor, setActiveColor] = useState(\"red\");\n//   const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//   const [canCheck, setCanCheck] = useState(false);\n//   const [previousRows, setPreviousRows] = useState([]);\n//   const [previousFeedback, setPreviousFeedback] = useState([]);\n//   const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n//   const [activeRowIndex, setRowIndex] = useState(0);\n//   const [totalRows, setTotalRows] = useState(10);\n//   const [victory, setVictory] = useState(false);\n//   const [defeat, setDefeat] = useState(false);\n// export const gameRow = {\n//   colors: colors,\n//   activeColor: activeColor,\n//   activeRowIndex: activeRowIndex,\n//   totalRows: totalRows,\n//   previousRows: previousRows,\n//   previousFeedback: previousFeedback,\n//   currentRow: currentRow,\n//   feedback: feedback,\n//   code: code,\n//   canCheck: canCheck,\n//   victory: victory,\n//   defeat: defeat\n// };\n\n// function Game() {\n  \n//   const code = [];\n//   for (let i = 0; i < 4; i++) {\n//     code.push(colors[Math.floor(Math.random() * 4) + 1]);\n//   }\n  \n//   // const gameRow = {\n//   //   colors: colors,\n//   //   activeColor: activeColor,\n//   //   activeRowIndex: activeRowIndex,\n//   //   totalRows: totalRows,\n//   //   previousRows: previousRows,\n//   //   previousFeedback: previousFeedback,\n//   //   currentRow: currentRow,\n//   //   feedback: feedback,\n//   //   code: code,\n//   //   canCheck: canCheck,\n//   //   victory: victory,\n//   //   defeat: defeat\n//   // };\n\n//   const activateColor = (color) => {\n//     //gameRow.activeColor = color\n//     setActiveColor(color);\n//   };\n\n//   // const ActivateCurrentRow = (activeRow) => {\n//   //   useEffect(()=>{\n//   //     setCurrentRow(activeRow);\n//   //   }, [activeRow])\n//   // }\n\n//   const setColor = (color, id) => {\n//     if (gameRow.victory) {\n//       console.log(\"loose\");\n//       return false;\n//     }\n//     const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     console.log(\"row\");\n//     console.log(rowId);\n//     const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     console.log(\"peg\");\n//     console.log(pegId);\n//     let activeRow = currentRow;\n//     let isArrayFull = 0;\n\n//     if (gameRow.activeRowIndex === rowId && color) {\n//       activeRow[pegId] = color;\n//       console.log(activeRow);\n//       //ActivateCurrentRow(activeRow);\n//       setCurrentRow(activeRow);\n//       console.log(currentRow);\n//       //gameRow.currentRow = activeRow\n\n//       for (let i in activeRow) {\n//         console.log(\"length\");\n//         console.log(activeRow[i].length);\n//         if (activeRow[i].length > 0) {\n//           isArrayFull++;\n//         }\n//       }\n//       console.log(\"array\");\n//       console.log(isArrayFull);\n//       if (isArrayFull >= activeRow.length) {\n//         console.log(\"yes\");\n//         setCanCheck(true);\n//         //gameRow.canCheck = true\n//       } else {\n//         setCanCheck(false);\n//         //gameRow.canCheck = false\n//       }\n//     }\n//   };\n\n//   const checkRow = () => {\n//     const activeRow = JSON.parse(JSON.stringify(gameRow.currentRow));\n//     const secretCode = JSON.parse(JSON.stringify(gameRow.code));\n//     const hints = gameRow.feedback;\n//     const previousHints = gameRow.previousFeedback;\n//     const previousRow = gameRow.previousRows;\n\n//     for (let i = 0; i < 4; i++) {\n//       if (activeRow[i] === secretCode[i]) {\n//         hints[i] = 2;\n//         delete activeRow[i];\n//         delete secretCode[i];\n//       }\n//     }\n//     //partially\n//     for (let i in activeRow) {\n//       for (let j in secretCode) {\n//         if (activeRow[i] === secretCode[j]) {\n//           hints[i] = 1;\n//           delete activeRow[i];\n//           delete secretCode[j];\n//         }\n//       }\n//     }\n//     hints.sort((a, b) => b - a);\n\n//     let win = true;\n//     for (let i in hints) {\n//       if (hints[i] < 2) {\n//         win = false;\n//         break;\n//       }\n//     }\n\n//     let loss = gameRow.defeat;\n//     if (gameRow.activeRowIndex >= gameRow.totalRows - 1) {\n//       loss = true;\n//     }\n\n//     /* updating board */\n//     previousHints.push(hints);\n//     previousRow.push(activeRow);\n\n//     setFeedback([0, 0, 0, 0]);\n//     setRowIndex(activeRowIndex + 1);\n//     setPreviousFeedback(previousHints);\n//     setCurrentRow([\"\", \"\", \"\", \"\"]);\n//     setPreviousRows(previousRow);\n//     setCanCheck(false);\n//     setVictory(win);\n//     setDefeat(loss);\n//   };\n//   const newGame = () => {\n//     const secretCode = [];\n//     for (let i = 0; i < 4; i++) {\n//       secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n//     }\n//     this.code = secretCode;\n//     console.log(\"new Game\");\n\n//     setRowIndex(0);\n//     setPreviousRows([]);\n//     setPreviousFeedback([]);\n//     setCurrentRow([\"\", \"\", \"\", \"\"]);\n//     setFeedback([0, 0, 0, 0]);\n//     setCanCheck(false);\n//     setVictory(false);\n//     setDefeat(false);\n//     setTotalRows(10);\n//   };\n\n//   return (\n//     <div className=\"game\">\n//       {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n\n//       <Colors\n//         list={colors}\n//         activeColor={gameRow.activeColor}\n//         action={activateColor}\n//       />\n\n//       <Board \n//         state={gameRow} \n//         pegAction={setColor} \n//         checkAction={checkRow} />\n\n//       {/* <p className='msg'> {msg} </p>            */}\n//       <Solution state={gameRow} newGame={newGame} />\n//     </div>\n//   );\n// }\n\n// export default Game;\n\n\n\n\n\n\n\n\n// //import React, { useState } from 'react';\n// import Board from './board';\n// import Colors from './colors';\n// import Solution from './solution';\n\n// /**\n//  * \n//  * @returns 1. infinite loop\n//  * 2. how to write if we want to invoke set only once\n//  * 3. how does Set work\n//  * 4. Component life cycle ......\n//  */\n\n\n// function Game() {\n//     const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n//     const code = [];\n//     for(let i=0;i<4;i++) {\n//         code.push(colors[Math.floor(Math.random() * 4) + 1])\n//     }\n\n//     this.state = {\n//       colors: colors,\n//       activeColor: \"red\",\n//       previousRows: [],\n//       previousFeedback: [],\n//       currentRow: [\"\", \"\", \"\", \"\"],\n//       feedback: [0, 0, 0, 0],\n//       activeRowIndex: 0,\n//       totalRows: 10,\n//       code: code,\n//       canCheck: false, //this checks if it's ok to eval currentRow\n//       victory: false,\n//       defeat: false\n//     };\n//     //let currentRow = ['','','',''];\n//     // const [activeColor, setActiveColor] = useState('red');\n//     // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n//     // const [canCheck, setCanCheck] = useState(false);\n//     // const [previousRows, setPreviousRows] = useState([]);\n//     // const [previousFeedback, setPreviousFeedback] = useState([]);\n//     // const [feedback, setFeedback] = useState([0,0,0,0]);\n//     // const [activeRowIndex, setRowIndex] = useState(0);\n//     // const [totalRows, setTotalRows] = useState(10);\n//     // const [victory, setVictory] = useState(false);\n//     // const [defeat, setDefeat] = useState(false);\n//     // const gameRow = {\n//     //   colors: colors,\n//     //   activeColor: activeColor,\n//     //   activeRowIndex: activeRowIndex,\n//     //   totalRows : totalRows,\n//     //   previousRows: previousRows,\n//     //   previousFeedback: previousFeedback,\n//     //   currentRow: currentRow,\n//     //   feedback: feedback,\n//     //   code: code,\n//     //   canCheck: canCheck,\n//     //   victory: victory,\n//     //   defeat: defeat,\n//     // };\n  \n//     const activateColor = (color) => {\n//         //gameRow.activeColor = color\n//         //setActiveColor(color)\n//         this.setState({\n//           activeColor: color\n//         });\n//     }\n\n//     // const activateCircleColor = (props) => {\n//     //   setCurrentRow(props);\n//     // }\n//     const setColor = (color, id) => {\n//       if (this.state.victory) {\n//         return false;\n//       }\n//       const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//       const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//       let currentRow = this.state.currentRow;\n//       let isArrayFull = 0;\n//       if (this.state.activeRowIndex === rowId && color) {\n//         currentRow[pegId] = color;\n//         this.setState({\n//           currentRow: currentRow\n//         });\n//         /* Checking if currentRow is Full */\n//         for (let i in currentRow) {\n//           if (currentRow[i].length > 0) {\n//             isArrayFull++;\n//           }\n//         }\n//         if (isArrayFull >= currentRow.length) {\n//           this.setState({ canCheck: true });\n//         } else {\n//           this.setState({ canCheck: false });\n//         }\n//       }\n//     }\n//     // const setColor = (color, id) => {\n//     //   if (gameRow.victory) {\n//     //       console.log(\"loose\");\n//     //       return false;\n//     //   }\n//     //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n//     //   console.log(\"row\");\n//     //   console.log(rowId);\n//     //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n//     //   console.log(\"peg\");\n//     //   console.log(pegId);\n//     //   let activeRow = gameRow.currentRow;\n//     //   let isArrayFull = 0;\n//     //     //activateCircleColor(activeRow);\n//     //   if (gameRow.activeRowIndex === rowId && color) {\n//     //     activeRow[pegId] = color;\n//     //     console.log(activeRow);\n//     //     console.log(currentRow);\n//     //     gameRow.currentRow = activeRow\n    \n//     //     for (let i in activeRow) {\n//     //         console.log(\"length\");\n//     //         console.log(activeRow[i].length);\n//     //         if (activeRow[i].length > 0) {\n//     //           isArrayFull++;\n//     //       }\n//     //     }\n//     //     console.log(\"array\");\n//     //     console.log(isArrayFull);\n//     //     if (isArrayFull >= activeRow.length) {\n//     //         console.log(\"yes\");\n//     //         setCanCheck(true);\n//     //         //gameRow.canCheck = true\n//     //     } else {\n//     //         setCanCheck(false);\n//     //         //gameRow.canCheck = false\n//     //     }\n//     //   }\n//     // };    \n    \n//     const checkRow = () => {\n//         const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n//         const secretCode = JSON.parse(JSON.stringify(this.state.code))\n//         const hints = this.state.feedback\n//         const previousHints = this.state.previousFeedback\n//         const previousRow = this.state.previousRows\n    \n//         for (let i = 0; i < 4; i++) {\n//           if (activeRow[i] === secretCode[i]) {\n//             hints[i] = 2\n//             delete (activeRow[i])\n//             delete (secretCode[i])\n//           }\n//         }\n//         //partially \n//         for (let i in activeRow) {\n//           for (let j in secretCode) {\n//             if (activeRow[i] === secretCode[j]) {\n//               hints[i] = 1\n//               delete (activeRow[i])\n//               delete (secretCode[j])\n//             }\n//           }\n//         }\n//         hints.sort((a, b) => (b - a))\n\n//         let win = true\n//         for (let i in hints) {\n//           if (hints[i] < 2) {\n//             win = false;\n//             break;\n//           }\n//         }\n    \n//         let loss = this.state.defeat;\n//         if (this.state.activeRowIndex >= this.state.totalRows-1) {\n//           loss = true;\n//         }\n    \n//         /* updating board */\n//         previousHints.push(hints)\n//         previousRow.push(activeRow)\n\n//         this.setState({\n//           feedback: [0, 0, 0, 0],\n//           activeRowIndex: this.state.activeRowIndex + 1,\n//           previousFeedback: this.state.previousFeedback,\n//           currentRow: ['', '', '', ''],\n//           previousRows: previousRow,\n//           canCheck: false,\n//           victory: win,\n//           defeat: loss,\n//         });\n\n//         // setFeedback([0, 0, 0, 0])\n//         // setRowIndex(activeRowIndex+1)\n//         // setPreviousFeedback(previousHints)\n//         // setCurrentRow([\"\",\"\",\"\",\"\"])\n//         // setPreviousRows(previousRow)\n//         // setCanCheck(false)\n//         // setVictory(win)\n//         // setDefeat(loss)\n    \n//       }\n//     const newGame = () => {\n    \n//         const secretCode = []\n//         for (let i = 0; i < 4; i++) {\n//             secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n//         }\n//         //this.code = secretCode\n//         console.log('new Game')\n\n//         // setRowIndex(0)\n//         // setPreviousRows([])\n//         // setPreviousFeedback([])\n//         // //setCurrentRow(['','','',''])\n//         // setFeedback([0,0,0,0])\n//         // setCanCheck(false)\n//         // setVictory(false)\n//         // setDefeat(false)\n//         // setTotalRows(10)\n//       }\n    \n//     return (\n//         <div className='game'>\n//             {/* <p>HIIIIIIIIII</p>\n//             <h1>hi </h1> */}\n  \n//           <Colors\n//             list={this.state.colors}\n//             activeColor={this.state.activeColor}\n//             action={activateColor} />\n\n//           <Board\n//             state={this.state}\n//             pegAction={setColor}\n//             checkAction={checkRow} />\n\n//         {/* <p className='msg'> {msg} </p>            */}\n//           <Solution\n//             state={this.state}\n//             newGame={newGame} />\n//           </div>\n//       );  \n      \n// }\n\n// export default Game;\n"]},"metadata":{},"sourceType":"module"}