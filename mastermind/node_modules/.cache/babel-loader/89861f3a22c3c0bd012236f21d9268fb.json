{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\";\nimport React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  this.state = {\n    colors: colors,\n    activeColor: \"red\",\n    previousRows: [],\n    previousFeedback: [],\n    currentRow: [\"\", \"\", \"\", \"\"],\n    feedback: [0, 0, 0, 0],\n    activeRowIndex: 0,\n    totalRows: 10,\n    code: code,\n    canCheck: false,\n    //this checks if it's ok to eval currentRow\n    victory: false,\n    defeat: false\n  }; //let currentRow = ['','','',''];\n  // const [activeColor, setActiveColor] = useState('red');\n  // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n  // const [canCheck, setCanCheck] = useState(false);\n  // const [previousRows, setPreviousRows] = useState([]);\n  // const [previousFeedback, setPreviousFeedback] = useState([]);\n  // const [feedback, setFeedback] = useState([0,0,0,0]);\n  // const [activeRowIndex, setRowIndex] = useState(0);\n  // const [totalRows, setTotalRows] = useState(10);\n  // const [victory, setVictory] = useState(false);\n  // const [defeat, setDefeat] = useState(false);\n  // const gameRow = {\n  //   colors: colors,\n  //   activeColor: activeColor,\n  //   activeRowIndex: activeRowIndex,\n  //   totalRows : totalRows,\n  //   previousRows: previousRows,\n  //   previousFeedback: previousFeedback,\n  //   currentRow: currentRow,\n  //   feedback: feedback,\n  //   code: code,\n  //   canCheck: canCheck,\n  //   victory: victory,\n  //   defeat: defeat,\n  // };\n\n  const activateColor = color => {\n    //gameRow.activeColor = color\n    //setActiveColor(color)\n    this.setState({\n      activeColor: color\n    });\n  }; // const activateCircleColor = (props) => {\n  //   setCurrentRow(props);\n  // }\n\n\n  const setColor = (color, id) => {\n    if (this.state.victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    let currentRow = this.state.currentRow;\n    let isArrayFull = 0;\n\n    if (this.state.activeRowIndex === rowId && color) {\n      currentRow[pegId] = color;\n      this.setState({\n        currentRow: currentRow\n      });\n      /* Checking if currentRow is Full */\n\n      for (let i in currentRow) {\n        if (currentRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= currentRow.length) {\n        this.setState({\n          canCheck: true\n        });\n      } else {\n        this.setState({\n          canCheck: false\n        });\n      }\n    }\n  }; // const setColor = (color, id) => {\n  //   if (gameRow.victory) {\n  //       console.log(\"loose\");\n  //       return false;\n  //   }\n  //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n  //   console.log(\"row\");\n  //   console.log(rowId);\n  //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n  //   console.log(\"peg\");\n  //   console.log(pegId);\n  //   let activeRow = gameRow.currentRow;\n  //   let isArrayFull = 0;\n  //     //activateCircleColor(activeRow);\n  //   if (gameRow.activeRowIndex === rowId && color) {\n  //     activeRow[pegId] = color;\n  //     console.log(activeRow);\n  //     console.log(currentRow);\n  //     gameRow.currentRow = activeRow\n  //     for (let i in activeRow) {\n  //         console.log(\"length\");\n  //         console.log(activeRow[i].length);\n  //         if (activeRow[i].length > 0) {\n  //           isArrayFull++;\n  //       }\n  //     }\n  //     console.log(\"array\");\n  //     console.log(isArrayFull);\n  //     if (isArrayFull >= activeRow.length) {\n  //         console.log(\"yes\");\n  //         setCanCheck(true);\n  //         //gameRow.canCheck = true\n  //     } else {\n  //         setCanCheck(false);\n  //         //gameRow.canCheck = false\n  //     }\n  //   }\n  // };    \n\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(this.state.currentRow));\n    const secretCode = JSON.parse(JSON.stringify(this.state.code));\n    const hints = this.state.feedback;\n    const previousHints = this.state.previousFeedback;\n    const previousRow = this.state.previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially \n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    hints.sort((a, b) => b - a);\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = this.state.defeat;\n\n    if (this.state.activeRowIndex >= this.state.totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    this.setState({\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: this.state.activeRowIndex + 1,\n      previousFeedback: this.state.previousFeedback,\n      currentRow: ['', '', '', ''],\n      previousRows: previousRow,\n      canCheck: false,\n      victory: win,\n      defeat: loss\n    }); // setFeedback([0, 0, 0, 0])\n    // setRowIndex(activeRowIndex+1)\n    // setPreviousFeedback(previousHints)\n    // setCurrentRow([\"\",\"\",\"\",\"\"])\n    // setPreviousRows(previousRow)\n    // setCanCheck(false)\n    // setVictory(win)\n    // setDefeat(loss)\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    } //this.code = secretCode\n\n\n    console.log('new Game'); // setRowIndex(0)\n    // setPreviousRows([])\n    // setPreviousFeedback([])\n    // //setCurrentRow(['','','',''])\n    // setFeedback([0,0,0,0])\n    // setCanCheck(false)\n    // setVictory(false)\n    // setDefeat(false)\n    // setTotalRows(10)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Board, {\n      state: this.state,\n      pegAction: setColor,\n      checkAction: checkRow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Solution, {\n      state: this.state,\n      newGame: newGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 9\n  }, this);\n}\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Board","Colors","Solution","Game","colors","code","i","push","Math","floor","random","state","activeColor","previousRows","previousFeedback","currentRow","feedback","activeRowIndex","totalRows","canCheck","victory","defeat","activateColor","color","setState","setColor","id","rowId","substr","indexOf","pegId","isArrayFull","length","checkRow","activeRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","sort","a","b","win","loss","newGame","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Board from './board';\nimport Colors from './colors';\nimport Solution from './solution';\n\n/**\n * \n * @returns 1. infinite loop\n * 2. how to write if we want to invoke set only once\n * 3. how does Set work\n * 4. Component life cycle ......\n */\n\n\nfunction Game() {\n    const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n\n    this.state = {\n      colors: colors,\n      activeColor: \"red\",\n      previousRows: [],\n      previousFeedback: [],\n      currentRow: [\"\", \"\", \"\", \"\"],\n      feedback: [0, 0, 0, 0],\n      activeRowIndex: 0,\n      totalRows: 10,\n      code: code,\n      canCheck: false, //this checks if it's ok to eval currentRow\n      victory: false,\n      defeat: false\n    };\n    //let currentRow = ['','','',''];\n    // const [activeColor, setActiveColor] = useState('red');\n    // const [currentRow, setCurrentRow] = useState([\"\", \"\", \"\", \"\"]);\n    // const [canCheck, setCanCheck] = useState(false);\n    // const [previousRows, setPreviousRows] = useState([]);\n    // const [previousFeedback, setPreviousFeedback] = useState([]);\n    // const [feedback, setFeedback] = useState([0,0,0,0]);\n    // const [activeRowIndex, setRowIndex] = useState(0);\n    // const [totalRows, setTotalRows] = useState(10);\n    // const [victory, setVictory] = useState(false);\n    // const [defeat, setDefeat] = useState(false);\n    // const gameRow = {\n    //   colors: colors,\n    //   activeColor: activeColor,\n    //   activeRowIndex: activeRowIndex,\n    //   totalRows : totalRows,\n    //   previousRows: previousRows,\n    //   previousFeedback: previousFeedback,\n    //   currentRow: currentRow,\n    //   feedback: feedback,\n    //   code: code,\n    //   canCheck: canCheck,\n    //   victory: victory,\n    //   defeat: defeat,\n    // };\n  \n    const activateColor = (color) => {\n        //gameRow.activeColor = color\n        //setActiveColor(color)\n        this.setState({\n          activeColor: color\n        });\n    }\n\n    // const activateCircleColor = (props) => {\n    //   setCurrentRow(props);\n    // }\n    const setColor = (color, id) => {\n      if (this.state.victory) {\n        return false;\n      }\n      const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n      const pegId = +id.substr(id.indexOf(\"-\") + 1);\n      let currentRow = this.state.currentRow;\n      let isArrayFull = 0;\n      if (this.state.activeRowIndex === rowId && color) {\n        currentRow[pegId] = color;\n        this.setState({\n          currentRow: currentRow\n        });\n        /* Checking if currentRow is Full */\n        for (let i in currentRow) {\n          if (currentRow[i].length > 0) {\n            isArrayFull++;\n          }\n        }\n        if (isArrayFull >= currentRow.length) {\n          this.setState({ canCheck: true });\n        } else {\n          this.setState({ canCheck: false });\n        }\n      }\n    }\n    // const setColor = (color, id) => {\n    //   if (gameRow.victory) {\n    //       console.log(\"loose\");\n    //       return false;\n    //   }\n    //   const rowId = +id.substr(1, id.indexOf(\"-\") - 1);\n    //   console.log(\"row\");\n    //   console.log(rowId);\n    //   const pegId = +id.substr(id.indexOf(\"-\") + 1);\n    //   console.log(\"peg\");\n    //   console.log(pegId);\n    //   let activeRow = gameRow.currentRow;\n    //   let isArrayFull = 0;\n    //     //activateCircleColor(activeRow);\n    //   if (gameRow.activeRowIndex === rowId && color) {\n    //     activeRow[pegId] = color;\n    //     console.log(activeRow);\n    //     console.log(currentRow);\n    //     gameRow.currentRow = activeRow\n    \n    //     for (let i in activeRow) {\n    //         console.log(\"length\");\n    //         console.log(activeRow[i].length);\n    //         if (activeRow[i].length > 0) {\n    //           isArrayFull++;\n    //       }\n    //     }\n    //     console.log(\"array\");\n    //     console.log(isArrayFull);\n    //     if (isArrayFull >= activeRow.length) {\n    //         console.log(\"yes\");\n    //         setCanCheck(true);\n    //         //gameRow.canCheck = true\n    //     } else {\n    //         setCanCheck(false);\n    //         //gameRow.canCheck = false\n    //     }\n    //   }\n    // };    \n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(this.state.currentRow))\n        const secretCode = JSON.parse(JSON.stringify(this.state.code))\n        const hints = this.state.feedback\n        const previousHints = this.state.previousFeedback\n        const previousRow = this.state.previousRows\n    \n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n        //partially \n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n        hints.sort((a, b) => (b - a))\n\n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        let loss = this.state.defeat;\n        if (this.state.activeRowIndex >= this.state.totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        this.setState({\n          feedback: [0, 0, 0, 0],\n          activeRowIndex: this.state.activeRowIndex + 1,\n          previousFeedback: this.state.previousFeedback,\n          currentRow: ['', '', '', ''],\n          previousRows: previousRow,\n          canCheck: false,\n          victory: win,\n          defeat: loss,\n        });\n\n        // setFeedback([0, 0, 0, 0])\n        // setRowIndex(activeRowIndex+1)\n        // setPreviousFeedback(previousHints)\n        // setCurrentRow([\"\",\"\",\"\",\"\"])\n        // setPreviousRows(previousRow)\n        // setCanCheck(false)\n        // setVictory(win)\n        // setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n        //this.code = secretCode\n        console.log('new Game')\n\n        // setRowIndex(0)\n        // setPreviousRows([])\n        // setPreviousFeedback([])\n        // //setCurrentRow(['','','',''])\n        // setFeedback([0,0,0,0])\n        // setCanCheck(false)\n        // setVictory(false)\n        // setDefeat(false)\n        // setTotalRows(10)\n      }\n    \n    return (\n        <div className='game'>\n            {/* <p>HIIIIIIIIII</p>\n            <h1>hi </h1> */}\n  \n          <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n\n          <Board\n            state={this.state}\n            pegAction={setColor}\n            checkAction={checkRow} />\n\n        {/* <p className='msg'> {msg} </p>            */}\n          <Solution\n            state={this.state}\n            newGame={newGame} />\n          </div>\n      );  \n      \n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}