{"ast":null,"code":"var _jsxFileName = \"/Users/aastha/Desktop/React/mastermind/src/game.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Colors from './colors';\n/**\n * \n * @returns \n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  //const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n  const [colors, setColors] = useState();\n  const [activeColor, setActiveColor] = useState('red');\n  const [previousRows, setPreviousRows] = useState([]);\n  const [previousFeedback, setPreviousFeedback] = useState([]);\n  const [currentRow, setCurrentRow] = useState(['', '', '', '']);\n  const [feedback, setFeedback] = useState([0, 0, 0, 0]);\n  const [activeRowIndex, setRowIndex] = useState(0);\n  const [totalRows, setTotalRows] = useState(10);\n  const [canCheck, setCanCheck] = useState(false);\n  const [victory, setVictory] = useState(false);\n  const [defeat, setDefeat] = useState(false); //setColors(['red', 'green', 'blue', 'orange', 'purple']);\n\n  console.log(colors);\n  const code = [];\n\n  for (let i = 0; i < 4; i++) {\n    code.push(colors[Math.floor(Math.random() * 4) + 1]);\n  }\n\n  const activateColor = color => {\n    setActiveColor(color);\n  };\n\n  const setColor = (color, id) => {\n    if (victory) {\n      return false;\n    }\n\n    const rowId = +id.substr(1, id.indexOf('-') - 1);\n    const pegId = +id.substr(id.indexOf('-') + 1);\n    let activeRow = currentRow;\n    let isArrayFull = 0;\n\n    if (activeRowIndex === rowId && color) {\n      activeRow[pegId] = color;\n      setCurrentRow(activeRow);\n\n      for (let i in activeRow) {\n        if (activeRow[i].length > 0) {\n          isArrayFull++;\n        }\n      }\n\n      if (isArrayFull >= activeRow.length) {\n        setCanCheck(true);\n      } else {\n        setCanCheck(false);\n      }\n    }\n  };\n\n  const checkRow = () => {\n    const activeRow = JSON.parse(JSON.stringify(currentRow));\n    const secretCode = JSON.parse(JSON.stringify(code));\n    const hints = feedback;\n    const previousHints = previousFeedback;\n    const previousRow = previousRows;\n\n    for (let i = 0; i < 4; i++) {\n      if (activeRow[i] === secretCode[i]) {\n        hints[i] = 2;\n        delete activeRow[i];\n        delete secretCode[i];\n      }\n    } //partially \n\n\n    for (let i in activeRow) {\n      for (let j in secretCode) {\n        if (activeRow[i] === secretCode[j]) {\n          hints[i] = 1;\n          delete activeRow[i];\n          delete secretCode[j];\n        }\n      }\n    }\n\n    let win = true;\n\n    for (let i in hints) {\n      if (hints[i] < 2) {\n        win = false;\n        break;\n      }\n    }\n\n    let loss = defeat;\n\n    if (activeRowIndex >= totalRows - 1) {\n      loss = true;\n    }\n    /* updating board */\n\n\n    previousHints.push(hints);\n    previousRow.push(activeRow);\n    setFeedback([0, 0, 0, 0]);\n    setRowIndex(activeRowIndex + 1);\n    setPreviousFeedback(previousHints);\n    setCurrentRow(['', '', '', '']);\n    setPreviousRows(previousRow);\n    setCanCheck(false);\n    setVictory(win);\n    setDefeat(loss);\n  };\n\n  const newGame = () => {\n    const secretCode = [];\n\n    for (let i = 0; i < 4; i++) {\n      secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1]);\n    }\n\n    this.code = secretCode;\n    console.log('new Game');\n    setRowIndex(0);\n    setPreviousRows([]);\n    setPreviousFeedback([]);\n    setCurrentRow(['', '', '', '']);\n    setFeedback([0, 0, 0, 0]);\n    setCanCheck(false);\n    setVictory(false);\n    setDefeat(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"HIIIIIIIIII\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"hi \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Colors, {\n      list: colors,\n      activeColor: activeColor,\n      action: activateColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"KSSrbiDAoPBpGoupHA0+otsNIlM=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/aastha/Desktop/React/mastermind/src/game.js"],"names":["React","useState","Colors","Game","colors","setColors","activeColor","setActiveColor","previousRows","setPreviousRows","previousFeedback","setPreviousFeedback","currentRow","setCurrentRow","feedback","setFeedback","activeRowIndex","setRowIndex","totalRows","setTotalRows","canCheck","setCanCheck","victory","setVictory","defeat","setDefeat","console","log","code","i","push","Math","floor","random","activateColor","color","setColor","id","rowId","substr","indexOf","pegId","activeRow","isArrayFull","length","checkRow","JSON","parse","stringify","secretCode","hints","previousHints","previousRow","j","win","loss","newGame","state"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Colors from './colors';\n\n/**\n * \n * @returns \n */\n\nfunction Game() {\n    //const colors = ['red', 'green', 'blue', 'orange', 'purple'];\n    const [colors, setColors] = useState();\n    const [activeColor, setActiveColor] = useState('red');\n    const [previousRows, setPreviousRows] = useState([]);\n    const [previousFeedback, setPreviousFeedback] = useState([]);\n    const [currentRow, setCurrentRow] = useState(['','','','']);\n    const [feedback, setFeedback] = useState([0,0,0,0]);\n    const [activeRowIndex, setRowIndex] = useState(0);\n    const [totalRows, setTotalRows] = useState(10);\n    const [canCheck, setCanCheck] = useState(false);\n    const [victory, setVictory] = useState(false);\n    const [defeat, setDefeat] = useState(false);\n\n\n    //setColors(['red', 'green', 'blue', 'orange', 'purple']);\n    console.log(colors)\n    const code = [];\n    for(let i=0;i<4;i++) {\n        code.push(colors[Math.floor(Math.random() * 4) + 1])\n    }\n    \n    const activateColor = (color) => {\n        setActiveColor(color)\n      }\n\n    const setColor = (color, id) => {\n        if (victory) {\n          return false\n        }\n        const rowId = +id.substr(1, id.indexOf('-') - 1)\n        const pegId = +id.substr(id.indexOf('-') + 1)\n        let activeRow = currentRow\n        let isArrayFull = 0\n    \n        if (activeRowIndex === rowId && color) {\n          activeRow[pegId] = color\n          setCurrentRow(activeRow)\n\n          for (let i in activeRow) {\n            if (activeRow[i].length > 0) {\n              isArrayFull++;\n            }\n          }\n          if (isArrayFull >= activeRow.length) {\n              setCanCheck(true)\n          } else {\n              setCanCheck(false)\n          }\n        }\n      }\n    \n    const checkRow = () => {\n        const activeRow = JSON.parse(JSON.stringify(currentRow))\n        const secretCode = JSON.parse(JSON.stringify(code))\n        const hints = feedback\n        const previousHints = previousFeedback\n        const previousRow = previousRows\n    \n        for (let i = 0; i < 4; i++) {\n          if (activeRow[i] === secretCode[i]) {\n            hints[i] = 2\n            delete (activeRow[i])\n            delete (secretCode[i])\n          }\n        }\n        //partially \n        for (let i in activeRow) {\n          for (let j in secretCode) {\n            if (activeRow[i] === secretCode[j]) {\n              hints[i] = 1\n              delete (activeRow[i])\n              delete (secretCode[j])\n            }\n          }\n        }\n    \n        let win = true\n        for (let i in hints) {\n          if (hints[i] < 2) {\n            win = false;\n            break;\n          }\n        }\n    \n        let loss = defeat;\n        if (activeRowIndex >= totalRows-1) {\n          loss = true;\n        }\n    \n        /* updating board */\n        previousHints.push(hints)\n        previousRow.push(activeRow)\n\n        setFeedback([0, 0, 0, 0])\n        setRowIndex(activeRowIndex+1)\n        setPreviousFeedback(previousHints)\n        setCurrentRow(['','','',''])\n        setPreviousRows(previousRow)\n        setCanCheck(false)\n        setVictory(win)\n        setDefeat(loss)\n    \n      }\n    const newGame = () => {\n    \n        const secretCode = []\n        for (let i = 0; i < 4; i++) {\n            secretCode.push(this.state.colors[Math.floor(Math.random() * 4) + 1])\n        }\n        this.code = secretCode\n        console.log('new Game')\n\n        setRowIndex(0)\n        setPreviousRows([])\n        setPreviousFeedback([])\n        setCurrentRow(['','','',''])\n        setFeedback([0,0,0,0])\n        setCanCheck(false)\n        setVictory(false)\n        setDefeat(false)\n      }\n    \n    return (\n        <div className='game'>\n            <p>HIIIIIIIIII</p>\n            <h1>hi </h1>\n  \n          <Colors\n            list={colors}\n            activeColor={activeColor}\n            action={activateColor} />\n        </div>\n      );  \n      \n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}